{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#client_api_vn","title":"Client_API_VN","text":""},{"location":"#presentation","title":"Presentation","text":"<p>Python applications that use Biolovision/VisioNature (VN) API to:</p> <ul> <li>download data from VN sites and stores it to a Postgresql database.</li> <li>update sightings directly in VN site</li> </ul> <p>Applications are available either as:</p> <ul> <li>Python modules from PyPI</li> <li>Docker images from Docker Hub</li> </ul> <p>They are tested under Linux Ubuntu &gt;20. Other Linux distributions could work. Windows is not tested at all and will probably not work.</p> <ul> <li>Github repository: https://github.com/dthonon/Client_API_VN/</li> <li>Documentation https://dthonon.github.io/Client_API_VN/</li> </ul> <p>A thin Python layer on top of Biolovision API is provided, as described in biolovision.api.</p>"},{"location":"#installation-python","title":"Installation - Python","text":"<p>These instructions present the steps required to install the Python applications.</p> <p>Windows:</p> <pre><code>Install Python from Microsoft store\n\nAdd python script directory to Path, as described in\n`How to add Python to Windows PATH &lt;https://datatofish.com/add-python-to-windows-path/&gt;`_.\n</code></pre> <p>Linux: add the following debian packages:</p> <pre><code>sudo apt -y install build-essential python3-dev python3-venv\n</code></pre> <p>Create a python virtual environment, activate it and update basic tools:</p> <pre><code>python3 -m venv env_VN\nsource env_VN/bin/activate\npython -m pip install --upgrade pip\n</code></pre> <p>Install from PyPI:</p> <pre><code>pip install Client-API-VN\n</code></pre>"},{"location":"#installation-docker","title":"Installation - Docker","text":"<p>These instructions present the steps required to install the Docker applications:</p> <pre><code>docker pull dthonon/client-api-vn\ndocker run --name xfer_vn \\\n           --mount source=xfer_vn,target=/root \\\n           --workdir /root \\\n           --tty --interactive \\\n           dthonon/client-api-vn bash\n</code></pre> <p>This docker only contains the application and requires an external Postgresql database.</p> <p>The following steps are the common to both Python and Docker installation.</p>"},{"location":"#getting-started-transfer_vn","title":"Getting Started - transfer_vn","text":"<p>See transfer_vn for more information.</p>"},{"location":"#getting-started-update_vn","title":"Getting Started - update_vn","text":"<p>See update_vn for more information.</p>"},{"location":"#getting-started-validate_vn","title":"Getting Started - validate_vn","text":"<p>See validate_vn for more information.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>For Linux and Postgresql installation, refer to server installation.</p> <p>Installation requires the following python module:</p> <pre><code>pip\n</code></pre> <p>All other python dependencies are managed by <code>make install</code>.</p> <p>Repository initiated with fpgmaas/cookiecutter-poetry.</p>"},{"location":"authors/","title":"About Client_API_VN","text":""},{"location":"authors/#contributors","title":"Contributors:","text":"<ul> <li>Daniel Thonon - Initial work</li> <li>Fr\u00e9d\u00e9ric Cloitre - Testing and bug fixing</li> </ul> <p>See also the list of contributors.</p>"},{"location":"authors/#acknowledgments","title":"Acknowledgments:","text":"<ul> <li>Ga\u00ebtan Delaloye, for providing examples and support during the development.</li> </ul>"},{"location":"changelog-old/","title":"Client-API-VN v2.12.0 (2023-11-14)","text":""},{"location":"changelog-old/#features","title":"Features","text":"<ul> <li>When storing in Postgresql JSON database, forms are now created   before dependant sightings. (<code>#294 &lt;https://github.com/dthonon/Client_API_VN/issues/294&gt;</code>_)</li> <li>Python 3.10 is supported (<code>#296 &lt;https://github.com/dthonon/Client_API_VN/issues/296&gt;</code>_)</li> <li>Ajout du champ sempachid_family dans la table observations. (<code>#320 &lt;https://github.com/dthonon/Client_API_VN/issues/320&gt;</code>)</li> </ul>"},{"location":"changelog-old/#bugfixes","title":"Bugfixes","text":"<ul> <li>Solved several minor issues in code format and documentation. (<code>#306 &lt;https://github.com/dthonon/Client_API_VN/issues/306&gt;</code>_)</li> <li>Unwanted additional downloads have been removed. (<code>#314 &lt;https://github.com/dthonon/Client_API_VN/issues/314&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#improved-documentation","title":"Improved Documentation","text":"<ul> <li>User guides are available for the scripts. (<code>#180 &lt;https://github.com/dthonon/Client_API_VN/issues/180&gt;</code>_)</li> <li>Added a comment in YAML template :   use the territory shortname, not the territory id (<code>#289 &lt;https://github.com/dthonon/Client_API_VN/issues/289&gt;</code>)</li> <li>JSON schemas updated with current export format. (<code>#322 &lt;https://github.com/dthonon/Client_API_VN/issues/322&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#deprecations-and-removals","title":"Deprecations and Removals","text":"<ul> <li>updateuuid script is removed, as it was not fully tested. (<code>#303 &lt;https://github.com/dthonon/Client_API_VN/issues/303&gt;</code>)</li> </ul>"},{"location":"changelog-old/#client-api-vn-v2111-2022-12-05","title":"Client-API-VN v2.11.1 (2022-12-05)","text":""},{"location":"changelog-old/#bugfixes_1","title":"Bugfixes","text":"<ul> <li>Updatevn would fail if EOL character is in private_comment.   This should be solved by removing EOL from the comment. (<code>#300 &lt;https://github.com/dthonon/Client_API_VN/issues/300&gt;</code>)</li> </ul>"},{"location":"changelog-old/#improved-documentation_1","title":"Improved Documentation","text":"<ul> <li>Added an example of database usage. (<code>#279 &lt;https://github.com/dthonon/Client_API_VN/issues/279&gt;</code>_)</li> <li>Installation on Windows is now documented.   Tested for updatevn script only. (<code>#284 &lt;https://github.com/dthonon/Client_API_VN/issues/284&gt;</code>)</li> </ul>"},{"location":"changelog-old/#misc","title":"Misc","text":"<ul> <li><code>#290 &lt;https://github.com/dthonon/Client_API_VN/issues/290&gt;</code>_</li> </ul>"},{"location":"changelog-old/#client-api-vn-v2110-2022-06-26","title":"Client-API-VN v2.11.0 (2022-06-26)","text":""},{"location":"changelog-old/#features_1","title":"Features","text":"<ul> <li>Places are downloaded by increment when using <code>--update</code>. (<code>#166 &lt;https://github.com/dthonon/Client_API_VN/issues/166&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#bugfixes_2","title":"Bugfixes","text":"<ul> <li>Username and password are now replaced by <code>***</code> in log file. (<code>#267 &lt;https://framagit.org/lpo/Client_API_VN/issues/267&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#misc_1","title":"Misc","text":"<ul> <li>Upgraded code for URL() deprecation. <code>#143 &lt;https://github.com/dthonon/Client_API_VN/issues/143&gt;</code>_</li> </ul>"},{"location":"changelog-old/#client-api-vn-v2100-2022-04-17","title":"Client-API-VN v2.10.0 (2022-04-17)","text":""},{"location":"changelog-old/#features_2","title":"Features","text":"<ul> <li>A new action is available: <code>transfer_vn --migrate</code>.   This action updates the JSON schema to the latest version.   Running this action is requested in the CHANGELOG, if needed. (<code>#184 &lt;https://github.com/dthonon/Client_API_VN/issues/184&gt;</code>_)</li> <li>New missing index on observations_json.id_form_universal field.</li> </ul> <p>Please run <code>transfer_vn --migrate</code> to update your database to   revision ID: 1929ad3f463c. (<code>#185 &lt;https://github.com/dthonon/Client_API_VN/issues/185&gt;</code>_)</p> <ul> <li>wkt field, containing transects, is available in places table.   Please run <code>transfer_vn --col-table-create</code> to update the database. (<code>#191 &lt;https://github.com/dthonon/Client_API_VN/issues/191&gt;</code>_)</li> <li>Column source has been added to observations table.   Please run <code>transfer_vn --col-table-create</code> to update the database. (<code>#192 &lt;https://github.com/dthonon/Client_API_VN/issues/192&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#bugfixes_3","title":"Bugfixes","text":"<ul> <li>Storing to files works. (<code>#175 &lt;https://github.com/dthonon/Client_API_VN/issues/175&gt;</code>_)</li> <li>Storing to files in JSON long format works. (<code>#183 &lt;https://github.com/dthonon/Client_API_VN/issues/183&gt;</code>_)</li> <li>Transfers ending with HTTPerror are now logged in downloadlog table. (<code>#189 &lt;https://github.com/dthonon/Client_API_VN/issues/189&gt;</code>)</li> </ul>"},{"location":"changelog-old/#improved-documentation_2","title":"Improved Documentation","text":"<ul> <li>Documentation is available for transfervn and update_vn, see   <code>transfer_vn Documentation &lt;https://client-api-readthedocs.io/en/latest/apps/transfer_vn.html&gt;</code> and   <code>update_vn Documentation &lt;https://client-api-readthedocs.io/en/latest/apps/update_vn.html&gt;</code> (<code>#180 &lt;https://github.com/dthonon/Client_API_VN/issues/180&gt;</code>)</li> <li>JSON schemas are updated to reflect latest API downloads. (<code>#193 &lt;https://github.com/dthonon/Client_API_VN/issues/193&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#misc_2","title":"Misc","text":"<ul> <li><code>#188 &lt;https://github.com/dthonon/Client_API_VN/issues/188&gt;</code>_</li> </ul>"},{"location":"changelog-old/#client-api-vn-v293-2021-11-08","title":"Client-API-VN v2.9.3 (2021-11-08)","text":""},{"location":"changelog-old/#bugfixes_4","title":"Bugfixes","text":"<ul> <li>Observations were not deleted from PG database if deleted in Biolovision site.   This is fixed and deletion are now synchronized.   A full download is required to delete previous observations. (<code>#171 &lt;https://github.com/dthonon/Client_API_VN/issues/171&gt;</code>_)</li> <li>Parameter maxchunks has been raised, by default to 1000,   to allow for much larger transfers.   Please consider modifying your existing YAML configuration files. (<code>#178 &lt;https://github.com/dthonon/Client_API_VN/issues/178&gt;</code>)</li> </ul>"},{"location":"changelog-old/#client-api-vn-v292-2021-11-03","title":"Client-API-VN v2.9.2 (2021-11-03)","text":""},{"location":"changelog-old/#bugfixes_5","title":"Bugfixes","text":"<ul> <li>In downloadlog table, the number of observations updated is now correct. (<code>#157 &lt;https://github.com/dthonon/Client_API_VN/issues/157&gt;</code>)</li> <li>Downloading a taxogroup with limited access will raise HTTP 401 error,   it the account does not have access right. In that case,   it must be excluded in YAML file. (<code>#165 &lt;https://github.com/dthonon/Client_API_VN/issues/165&gt;</code>)</li> </ul>"},{"location":"changelog-old/#improved-documentation_3","title":"Improved Documentation","text":"<ul> <li>Minimal versions of supported OS has been updated.   They are tested under Linux Ubuntu &gt;20 or Debian 10. (<code>#163 &lt;https://github.com/dthonon/Client_API_VN/issues/163&gt;</code>_)</li> <li>Minimal documentation of transfervn is available. (<code>#164 &lt;https://github.com/dthonon/Client_API_VN/issues/164&gt;</code>)</li> </ul>"},{"location":"changelog-old/#client-api-vn-v291-2021-10-31","title":"Client-API-VN v2.9.1 (2021-10-31)","text":""},{"location":"changelog-old/#bugfixes_6","title":"Bugfixes","text":"<ul> <li>Several transient errors could stop transfervn after max_retry errors.   This is fixed: a succesful transfer resets the error counter. (<code>#155 &lt;https://github.com/dthonon/Client_API_VN/issues/155&gt;</code>)</li> <li>Places are now downloaded and stored correctly. (<code>#168 &lt;https://github.com/dthonon/Client_API_VN/issues/168&gt;</code>_)</li> <li>Very long transfer duration are now handled without error. (<code>#176 &lt;https://github.com/dthonon/Client_API_VN/issues/176&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#client-api-vn-v290-2021-10-11","title":"Client-API-VN v2.9.0 (2021-10-11)","text":""},{"location":"changelog-old/#features_3","title":"Features","text":"<ul> <li>In case of HTTP error, the error message in the text included   in the response is printed. (<code>#156 &lt;https://github.com/dthonon/Client_API_VN/issues/156&gt;</code>_)</li> <li>Supported python versions are 3.7 to 3.9.   Previous versions are not supported and will not work. (<code>#172 &lt;https://github.com/dthonon/Client_API_VN/issues/172&gt;</code>_)</li> <li>observations/deletelist is available in biolovision/apy.   Note that id_form or id_form_universal to delete must be   included in data dict. (<code>#173 &lt;https://github.com/dthonon/Client_API_VN/issues/173&gt;</code>)</li> </ul>"},{"location":"changelog-old/#bugfixes_7","title":"Bugfixes","text":"<ul> <li>updatevn now accepts single quote \"'\" in value parameter.   It must be quoted with double-quote, i.e. \"aujourd'hui\". (<code>#154 &lt;https://github.com/dthonon/Client_API_VN/issues/154&gt;</code>)</li> </ul>"},{"location":"changelog-old/#improved-documentation_4","title":"Improved Documentation","text":"<ul> <li>Link to documentation now refer to readthedocs/stable. (<code>#160 &lt;https://github.com/dthonon/Client_API_VN/issues/160&gt;</code>_)</li> <li>Running transfervn from cron is now documented in README (<code>#174 &lt;https://github.com/dthonon/Client_API_VN/issues/174&gt;</code>)</li> </ul>"},{"location":"changelog-old/#misc_3","title":"Misc","text":"<ul> <li><code>#68 &lt;https://github.com/dthonon/Client_API_VN/issues/68&gt;</code>_</li> </ul>"},{"location":"changelog-old/#client-api-vn-v281-2021-06-02","title":"Client-API-VN v2.8.1 (2021-06-02)","text":""},{"location":"changelog-old/#features_4","title":"Features","text":"<ul> <li> <p>In order to get timing data of each request, table import.download_log is extended.   If you upgrade without recreating JSON tables, you must run the following script::</p> <p>ALTER TABLE import.download_log ADD COLUMN length integer;   ALTER TABLE import.download_log ADD COLUMN duration integer;   CREATE INDEX ix_import_download_log_duration ON import.download_log USING btree(duration);   CREATE INDEX ix_import_download_log_length ON import.download_log USING btree(length);</p> </li> <li> <p>confirmedby is now available in observations table. (<code>#151 &lt;https://github.com/dthonon/Client_API_VN/issues/151&gt;</code>)</p> </li> </ul>"},{"location":"changelog-old/#bugfixes_8","title":"Bugfixes","text":"<ul> <li>When dropping database (--dbdrop), transfer_vn just logs a warning if the role is still used and cannot be dropped. (<code>#148 &lt;https://github.com/dthonon/Client_API_VN/issues/148&gt;</code>)</li> <li>When no territorialunit_ids parameter is defined in YAML configuration file,   all territorial_units are downloaded. (<code>#150 &lt;https://github.com/dthonon/Client_API_VN/issues/150&gt;</code>)</li> </ul>"},{"location":"changelog-old/#improved-documentation_5","title":"Improved Documentation","text":"<ul> <li>JSON schemas are updated. (<code>#149 &lt;https://github.com/dthonon/Client_API_VN/issues/149&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#client-api-vn-v280-2021-04-10","title":"Client-API-VN v2.8.0 (2021-04-10)","text":""},{"location":"changelog-old/#features_5","title":"Features","text":"<ul> <li> <p>It is now possible to filter download by territorial_unit.   An optional parameter is available in YAML configuration file, <code>filter</code> section::</p> <p># List of territorial_unit_ids to download   territorial_unit_ids:       - 01       - 03</p> </li> </ul> <p>(<code>#134 &lt;https://github.com/dthonon/Client_API_VN/issues/134&gt;</code>_)</p> <ul> <li>In observations table, projectcode is indexed. (<code>#142 &lt;https://github.com/dthonon/Client_API_VN/issues/142&gt;</code>)</li> <li>UUID, from JSON dowloaded, is now stored in observations table.   <code>import.uuid_xref</code> is removed. (<code>#146 &lt;https://github.com/dthonon/Client_API_VN/issues/146&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#bugfixes_9","title":"Bugfixes","text":"<ul> <li>updatevn gracefuly ignores empty line in CSV file. (<code>#130 &lt;https://github.com/dthonon/Client_API_VN/issues/130&gt;</code>)</li> <li>evnconf raises an exception if configuration file does not exist. (<code>#132 &lt;https://github.com/dthonon/Client_API_VN/issues/132&gt;</code>)</li> <li>Number of downloaded sightings is now displayed for each territorialunit. (<code>#137 &lt;https://github.com/dthonon/Client_API_VN/issues/137&gt;</code>)</li> <li>Both schemas are now created with <code>db_group</code> owner. (<code>#140 &lt;https://github.com/dthonon/Client_API_VN/issues/140&gt;</code>_)</li> <li>Updating sightings within forms is now possible.   Changing data of a sighting inside a forms should use the simple path::</li> </ul> <p><code>Is\u00e8re;3079911;$['data']['sightings'][0]['observers'][0]['project'];replace;26</code></p> <p>and not include <code>['forms'][0]</code>. (<code>#141 &lt;https://github.com/dthonon/Client_API_VN/issues/141&gt;</code>_)</p>"},{"location":"changelog-old/#improved-documentation_6","title":"Improved Documentation","text":"<ul> <li>Documentation improvement for API and installation. (<code>#129 &lt;https://github.com/dthonon/Client_API_VN/issues/129&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#deprecations-and-removals_1","title":"Deprecations and Removals","text":"<ul> <li>Support for list download is deprecated and will be removed in a future version.   Download should only be performed using search method. (<code>#135 &lt;https://github.com/dthonon/Client_API_VN/issues/135&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#client-api-vn-v271-2021-02-07","title":"Client-API-VN v2.7.1 (2021-02-07)","text":""},{"location":"changelog-old/#bugfixes_10","title":"Bugfixes","text":"<ul> <li>In column based tables, all text is now stored as TEXT instead of VACHAR(n) (<code>#138 &lt;https://github.com/dthonon/Client_API_VN/issues/138&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#client-api-vn-v270-2020-07-06","title":"Client-API-VN v2.7.0 (2020-07-06)","text":""},{"location":"changelog-old/#features_6","title":"Features","text":"<ul> <li>Storing to database can be disabled.</li> </ul> <p>Dowload_vn can now store to any or both Postgresql and File backend stores.</p> <p>The database section is optional.   If present, a new key is required::</p> <pre><code>  database:\n      # Enable storing to database\n      enabled: true (`#63 &lt;https://github.com/dthonon/Client_API_VN/issues/63&gt;`_)\n</code></pre> <ul> <li>Validation controler is available in biolovision.api.   (<code>#74 &lt;https://github.com/dthonon/Client_API_VN/issues/74&gt;</code>_)</li> <li>In case of service unavailable error (HTTP 503), wait for longer delay   before retry. Delay can be changed by YAML parameter unavailabledelay. (<code>#94 &lt;https://github.com/dthonon/Client_API_VN/issues/94&gt;</code>)</li> <li>Added field information from JSON download.</li> </ul> <p>In field_group table :</p> <ul> <li>text_v, from 'text' attribute</li> <li>group_v, from 'group' attribut\u00e9</li> </ul> <p>in field_details table :</p> <ul> <li> <p>textv, from 'text' attribute (<code>#107 &lt;https://github.com/dthonon/Client_API_VN/issues/107&gt;</code>)</p> </li> <li> <p>New commands added to update_vn.</p> </li> <li>delete_attribute, to keep the observation and remove the attribute with the given path</li> <li>deleteobservation, to remove completely the observation (<code>#113 &lt;https://github.com/dthonon/Client_API_VN/issues/113&gt;</code>)</li> <li>Python version 3.8 is now supported. (<code>#116 &lt;https://github.com/dthonon/Client_API_VN/issues/116&gt;</code>_)</li> <li>Added families controler in api and downloadvn. (<code>#120 &lt;https://github.com/dthonon/Client_API_VN/issues/120&gt;</code>)</li> <li>A new application, validate, checks downloaded JSON files against its schema.   JSON schemas are used to document the dowloaded files. (<code>#123 &lt;https://github.com/dthonon/Client_API_VN/issues/123&gt;</code>_)</li> <li>updatevn adds \"updated\" date in the hidden_comment (<code>#127 &lt;https://github.com/dthonon/Client_API_VN/issues/127&gt;</code>)</li> </ul>"},{"location":"changelog-old/#bugfixes_11","title":"Bugfixes","text":"<ul> <li>Scheduled jobs are now terminated by Ctrl-C.   There is still an OSError raised during shutdown. (<code>#96 &lt;https://github.com/dthonon/Client_API_VN/issues/96&gt;</code>_)</li> <li>Option --status does not start pending tasks. (<code>#112 &lt;https://github.com/dthonon/Client_API_VN/issues/112&gt;</code>_)</li> <li>updatevn accepts files with leading or trailing blanks in the values. (<code>#118 &lt;https://github.com/dthonon/Client_API_VN/issues/118&gt;</code>)</li> <li>Long jsonformat was not enforced by transfer_vn.   When json_format: long is defined in YAML file and file storage is enablesd,   files are now correctly containing long JSON data.   Note: long json_format is not compatible with PostgreSQL storage. (<code>#122 &lt;https://github.com/dthonon/Client_API_VN/issues/122&gt;</code>)</li> </ul>"},{"location":"changelog-old/#misc_4","title":"Misc","text":"<ul> <li><code>#75 &lt;https://github.com/dthonon/Client_API_VN/issues/75&gt;</code>, <code>#104 &lt;https://github.com/dthonon/Client_API_VN/issues/104&gt;</code>, <code>#111 &lt;https://github.com/dthonon/Client_API_VN/issues/111&gt;</code>, <code>#114 &lt;https://github.com/dthonon/Client_API_VN/issues/114&gt;</code>, <code>#115 &lt;https://github.com/dthonon/Client_API_VN/issues/115&gt;</code>_</li> </ul>"},{"location":"changelog-old/#client-api-vn-v264-2020-04-01","title":"Client-API-VN v2.6.4 (2020-04-01)","text":""},{"location":"changelog-old/#features_7","title":"Features","text":"<ul> <li>In biolovision.api, apicreate and api_delete are implemented. (<code>#98 &lt;https://github.com/dthonon/Client_API_VN/issues/98&gt;</code>)</li> </ul>"},{"location":"changelog-old/#bugfixes_12","title":"Bugfixes","text":"<ul> <li>In biolovision.api, apisearch works again (corrected regression). (<code>#102 &lt;https://github.com/dthonon/Client_API_VN/issues/102&gt;</code>)</li> <li>enddate and start_date are now correctly used, ie:   interval starts with start_date and ends with end_date.   Exception is raised if not in correct order.   NOTE : if used in YAML, please check the correct order. (<code>#105 &lt;https://github.com/dthonon/Client_API_VN/issues/105&gt;</code>)</li> <li>When using --update, the list of new observations could get too long and return HTTP error 414.   Update list are now chunked, and chunk size is controled by YAML parameter maxlist_length. (<code>#109 &lt;https://github.com/dthonon/Client_API_VN/issues/109&gt;</code>)</li> </ul>"},{"location":"changelog-old/#client-api-vn-v263-2020-03-14","title":"Client-API-VN v2.6.3 (2020-03-14)","text":""},{"location":"changelog-old/#bugfixes_13","title":"Bugfixes","text":"<ul> <li>apisearch, used in full download, was returning an empty dict.   It is now working correctly. (<code>#108 &lt;https://github.com/dthonon/Client_API_VN/issues/108&gt;</code>)</li> </ul>"},{"location":"changelog-old/#client-api-vn-v260-2019-10-17","title":"Client-API-VN v2.6.0 (2019-10-17)","text":""},{"location":"changelog-old/#features_8","title":"Features","text":"<ul> <li>A sample application is available in src/template. Copy sampleapp.py   and init.py to a new directory to start creating a new application. (<code>#100 &lt;https://github.com/dthonon/Client_API_VN/issues/100&gt;</code>)</li> <li>updatevn application is available for field test.   See README for details on how to use it. (<code>#101 &lt;https://github.com/dthonon/Client_API_VN/issues/101&gt;</code>)</li> </ul>"},{"location":"changelog-old/#client-api-vn-v252-2019-10-06","title":"Client-API-VN v2.5.2 (2019-10-06)","text":""},{"location":"changelog-old/#features_9","title":"Features","text":"<ul> <li>Application is now available as docker container.   See README for installation instructions. (<code>#95 &lt;https://github.com/dthonon/Client_API_VN/issues/95&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#client-api-vn-v250-2019-10-01","title":"Client-API-VN v2.5.0 (2019-10-01)","text":""},{"location":"changelog-old/#features_10","title":"Features","text":"<ul> <li>Major change on incremental (and full) download.   All controlers can now be downloaded on a regular basis.   See README for more information on download process.</li> </ul> <p>YAML configuration file must be updated to define download   schedule for all controlers. A typical example is given below:</p> <p>.. code-block:: yaml</p> <pre><code>  # Biolovision API controlers parameters\n  # Enables or disables download from each Biolovision API\n  # Also defines scheduling (cron-like) parameters, in UTC\n  controler:\n      entities:\n          # Enable download from this controler\n          enabled: true\n          schedule:\n              # Every Friday at 23:00 UTC\n              day_of_week: 4\n              hour: 23\n      fields:\n          # Enable download from this controler\n          enabled: true\n          schedule:\n              # Every Friday at 23:00 UTC\n              day_of_week: 4\n              hour: 23\n      local_admin_units:\n          # Enable download from this controler\n          enabled: true\n          schedule:\n              # Every Monday at 05:00 UTC\n              day_of_week: 0\n              hour: 5\n      observations:\n          # Enable download from this controler\n          enabled: true\n          # Define scheduling parameters\n          schedule:\n              # Every hour\n              year: '*'\n              month: '*'\n              day: '*'\n              week: '*'\n              day_of_week: '*'\n              hour: '*'\n              minute: 0\n      observers:\n          # Enable download from this controler\n          enabled: true\n          schedule:\n              # Every day at 06:00 UTC\n              hour: 6\n      places:\n          # Enable download from this controler\n          enabled: true\n          schedule:\n              # Every Thursday at 23:00 UTC\n              day_of_week: 3\n              hour: 23\n      species:\n          # Enable download from this controler\n          enabled: true\n          schedule:\n              # Every Wednesday at 22:00 UTC\n              day_of_week: 2\n              hour: 22\n      taxo_groups:\n          # Enable download from this controler\n          enabled: true\n          schedule:\n              # Every Wednesday at 22:00 UTC\n              day_of_week: 2\n              hour: 22\n      territorial_units:\n          # Enable download from this controler\n          enabled: true\n          schedule:\n              # Every Thursday at 23:00 UTC\n              day_of_week: 3\n              hour: 23\n</code></pre> <p>(<code>#24 &lt;https://github.com/dthonon/Client_API_VN/issues/24&gt;</code>_)</p> <ul> <li>When using --update option, observations create or update are   grouped in a single API call. This should improve performances.   downloadlog table now contains one row for each group of updates. (<code>#76 &lt;https://github.com/dthonon/Client_API_VN/issues/76&gt;</code>)</li> <li>For developers: biolovisionapi.py moved to an independant module.   Replace <code>from export_vn.biolovision_api import ...</code> by <code>from biolovision.api import ...</code> (<code>#88 &lt;https://github.com/dthonon/Client_API_VN/issues/88&gt;</code>)</li> <li>In case of parsing error in YAML configuration file,   the error message is printed without traceback. (<code>#89 &lt;https://github.com/dthonon/Client_API_VN/issues/89&gt;</code>_)</li> <li>A new <code>filter:</code> section is added to YAML configuration file.   <code>taxo_exclude:</code> list needs to be moved to this new section.</li> </ul> <p>To limit full download to a time interval, you can add:</p> <ul> <li><code>start_date</code>, optional date of first observation.     If omitted, start with earliest data.</li> <li><code>end_date</code>, optional date of last observation.     If omitted, start with latest data.</li> </ul> <p>Date format is YYYY-MM-DD.</p> <p>For example:</p> <p>.. code-block:: yaml</p> <pre><code>  # Observations filter, to limit download scope\n  filter:\n      # List of taxo_groups to exclude from download\n      # Uncommment taxo_groups to disable download\n      taxo_exclude:\n          #- TAXO_GROUP_BIRD\n          #- TAXO_GROUP_BAT\n          #- TAXO_GROUP_MAMMAL\n          - TAXO_GROUP_SEA_MAMMAL\n          #- TAXO_GROUP_REPTILIAN\n          #- TAXO_GROUP_AMPHIBIAN\n          #- TAXO_GROUP_ODONATA\n          #- TAXO_GROUP_BUTTERFLY\n          #- TAXO_GROUP_MOTH\n          #- TAXO_GROUP_ORTHOPTERA\n          #- TAXO_GROUP_HYMENOPTERA\n          #- TAXO_GROUP_ORCHIDACEAE\n          #- TAXO_GROUP_TRASH\n          #- TAXO_GROUP_EPHEMEROPTERA\n          #- TAXO_GROUP_PLECOPTERA\n          #- TAXO_GROUP_MANTODEA\n          #- TAXO_GROUP_AUCHENORRHYNCHA\n          #- TAXO_GROUP_HETEROPTERA\n          #- TAXO_GROUP_COLEOPTERA\n          #- TAXO_GROUP_NEVROPTERA\n          #- TAXO_GROUP_TRICHOPTERA\n          #- TAXO_GROUP_MECOPTERA\n          #- TAXO_GROUP_DIPTERA\n          #- TAXO_GROUP_PHASMATODEA\n          #- TAXO_GROUP_ARACHNIDA\n          #- TAXO_GROUP_SCORPIONES\n          #- TAXO_GROUP_FISH\n          #- TAXO_GROUP_MALACOSTRACA\n          #- TAXO_GROUP_GASTROPODA\n          #- TAXO_GROUP_BIVALVIA\n          #- TAXO_GROUP_BRANCHIOPODA\n          - TAXO_GROUP_ALIEN_PLANTS\n      # Use short (recommended) or long JSON data\n      # json_format: short\n      # Optional start and end dates\n      # start_date: 2019-09-01\n      # end_date: 2019-08-01\n</code></pre> <p>(<code>#93 &lt;https://github.com/dthonon/Client_API_VN/issues/93&gt;</code>_)</p>"},{"location":"changelog-old/#misc_5","title":"Misc","text":"<ul> <li><code>#36 &lt;https://github.com/dthonon/Client_API_VN/issues/36&gt;</code>, <code>#84 &lt;https://github.com/dthonon/Client_API_VN/issues/84&gt;</code></li> </ul>"},{"location":"changelog-old/#client-api-vn-v244-2019-08-22","title":"Client-API-VN v2.4.4 (2019-08-22)","text":""},{"location":"changelog-old/#features_11","title":"Features","text":"<ul> <li> <p>The following colums are added to forms::</p> <p>observer_uid        INT   date_start          DATE   date_stop           DATE</p> </li> </ul> <p>(<code>#86 &lt;https://github.com/dthonon/Client_API_VN/issues/86&gt;</code>_)</p>"},{"location":"changelog-old/#client-api-vn-v243-2019-08-22","title":"Client-API-VN v2.4.3 (2019-08-22)","text":""},{"location":"changelog-old/#features_12","title":"Features","text":"<ul> <li>Added protocolname column in forms table. (<code>#85 &lt;https://github.com/dthonon/Client_API_VN/issues/85&gt;</code>)</li> </ul>"},{"location":"changelog-old/#bugfixes_14","title":"Bugfixes","text":"<ul> <li>VACUUM is only performed on json and column-based tables created by transfervn.   This avoids a lengthy VACUUM on the full database. (<code>#70 &lt;https://github.com/dthonon/Client_API_VN/issues/70&gt;</code>)</li> <li>Corrected loggin message \"Updating observation {}\" (<code>#79 &lt;https://github.com/dthonon/Client_API_VN/issues/79&gt;</code>_)</li> <li>UUID are now correctly created for all observations. (<code>#80 &lt;https://github.com/dthonon/Client_API_VN/issues/80&gt;</code>_)</li> <li>In observations, date and dateyear are correctly extracted from JSON. (<code>#82 &lt;https://github.com/dthonon/Client_API_VN/issues/82&gt;</code>)</li> <li>Protocol data is stored in JSONB column, in forms table.   See <code>example query &lt;https://github.com/dthonon/partage-de-codes/snippets/3741&gt;</code>_   for how to use it to get STOC data.</li> </ul> <p>Note: For survey datas, as G. Delaloye pointed out, protocols rights accesses   must be configured in portals:   +-----------------+--------------------------------------------------------+   | compte | droit |   +=================+========================================================+   | utilisateur_api | Droits de gestion des donn\u00e9es compl\u00e9mentaires Gypa\u00e8tes |   +-----------------+--------------------------------------------------------+   | utilisateur_api | Droit de voir toutes les observations cach\u00e9es |   +-----------------+--------------------------------------------------------+   | utilisateur_api | Droits de faire des recherches, malgr\u00e9 le quota |   +-----------------+--------------------------------------------------------+   | utilisateur_api | Droits de gestion des observations |   +-----------------+--------------------------------------------------------+   | utilisateur_api | Droits d'administration |   +-----------------+--------------------------------------------------------+   | utilisateur_api | Acc\u00e8s admin Wetlands |   +-----------------+--------------------------------------------------------+   | utilisateur_api | Acc\u00e8s aux comptes utilisateurs tiers via l'API |   +-----------------+--------------------------------------------------------+   | utilisateur_api | Acc\u00e8s admin comptage protocol\u00e9 |   +-----------------+--------------------------------------------------------+   | utilisateur_api | Acc\u00e8s admin STOC Montagne |   +-----------------+--------------------------------------------------------+   | utilisateur_api | Acc\u00e8s admin STOC Sites |   +-----------------+--------------------------------------------------------+   | utilisateur_api | Acc\u00e8s admin SHOC |   +-----------------+--------------------------------------------------------+   | utilisateur_api | Acc\u00e8s admin STOC EPS |   +-----------------+--------------------------------------------------------+</p>"},{"location":"changelog-old/#client-api-vn-v242-2019-08-20","title":"Client-API-VN v2.4.2 (2019-08-20)","text":""},{"location":"changelog-old/#features_13","title":"Features","text":"<ul> <li>When using <code>--full</code> option, observations and forms are processed after all other controlers. (<code>#77 &lt;https://github.com/dthonon/Client_API_VN/issues/77&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#bugfixes_15","title":"Bugfixes","text":"<ul> <li> <p>Some options are exclusives::</p> <p>[--verbose | --quiet]   [--full | --update] (<code>#78 &lt;https://github.com/dthonon/Client_API_VN/issues/78&gt;</code>_)</p> </li> </ul>"},{"location":"changelog-old/#client-api-vn-v241-2019-08-19","title":"Client-API-VN v2.4.1 (2019-08-19)","text":""},{"location":"changelog-old/#features_14","title":"Features","text":"<ul> <li> <p>First pass of database tuning:</p> </li> <li> <p>Added indexes on main id columns</p> </li> <li> <p>Added id indexes on JSON tables (<code>#65 &lt;https://github.com/dthonon/Client_API_VN/issues/65&gt;</code>_)</p> </li> <li> <p>The number of concurrent database insertion threads was 4, which   is too much for the work required. At most 1 or 2 are used.   The default is now 2 workers.</p> </li> </ul> <p>NOTE: if your YAML configuration file contains a <code>[tuning]</code> section,   please modify <code>db_worker_threads: 2</code>. (<code>#71 &lt;https://github.com/dthonon/Client_API_VN/issues/71&gt;</code>_)</p> <ul> <li>For sites with a large number of observations per day, the minimum was too   large, leading to chunks exceeding 10 000 observations. Large chunk size   reduce parallel processing between client and server.   The minimum is now 5 days by default.</li> </ul> <p>NOTE: if your YAML configuration file contains a <code>[tuning]</code> section,   please modify <code>pid_limit_min: 5</code>. If your chunk size are still larger   than 10 000 observations, you can reduce it further. (<code>#72 &lt;https://github.com/dthonon/Client_API_VN/issues/72&gt;</code>_)</p>"},{"location":"changelog-old/#bugfixes_16","title":"Bugfixes","text":"<ul> <li>Forms should now be correctly updated if changed on the site. (<code>#66 &lt;https://github.com/dthonon/Client_API_VN/issues/66&gt;</code>_)</li> <li><code>id_form_universal</code> added to observations table, to refer to enclosing form. (<code>#73 &lt;https://github.com/dthonon/Client_API_VN/issues/73&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#client-api-vn-v240-2019-08-07","title":"Client-API-VN v2.4.0 (2019-08-07)","text":""},{"location":"changelog-old/#features_15","title":"Features","text":"<ul> <li>Storage and processing of JSON data has been improved, reducing processing time. (<code>#56 &lt;https://github.com/dthonon/Client_API_VN/issues/56&gt;</code>_)</li> <li>Field groups details use the text index provided by the API.   For example, fielddetails.id '5_1' is value '1' of group '5', meaning 'COLL_TRANS'. (<code>#62 &lt;https://github.com/dthonon/Client_API_VN/issues/62&gt;</code>)</li> <li>In observersjson, id_universal is stored in a separate column. (<code>#64 &lt;https://github.com/dthonon/Client_API_VN/issues/64&gt;</code>)</li> </ul>"},{"location":"changelog-old/#client-api-vn-v233-2019-08-04","title":"Client-API-VN v2.3.3 (2019-08-04)","text":""},{"location":"changelog-old/#features_16","title":"Features","text":"<ul> <li> <p>Several performance enhancements:</p> </li> <li> <p>projection to local coordinates is much faster, reducing processing     time by at least a factor of 6</p> </li> <li> <p>forms are only processed once, at the first observation of the form. (<code>#56 &lt;https://github.com/dthonon/Client_API_VN/issues/56&gt;</code>_)</p> </li> </ul>"},{"location":"changelog-old/#bugfixes_17","title":"Bugfixes","text":"<ul> <li>SQL file should be correct, when installed from PyPI.   To be tested from PyPI and from github clone. (<code>#57 &lt;https://github.com/dthonon/Client_API_VN/issues/57&gt;</code>_)</li> <li>In table observations, updatedate is correctly filled. (<code>#59 &lt;https://github.com/dthonon/Client_API_VN/issues/59&gt;</code>)</li> <li>Increments are correctly tracked. When using --update, only new or changed observations are downloaded. (<code>#60 &lt;https://github.com/dthonon/Client_API_VN/issues/60&gt;</code>_)</li> <li> <p>Fields are now dowloaded in 2 tables :</p> </li> <li> <p>field_groups, which lists all groups of fields</p> </li> <li> <p>field_details, which lists all values for each group</p> </li> </ul> <p>Column observations.behaviours is now a Postgresql ARRAY,   listing behaviours linkid code. (<code>#61 &lt;https://github.com/dthonon/Client_API_VN/issues/61&gt;</code>)</p>"},{"location":"changelog-old/#improved-documentation_7","title":"Improved Documentation","text":"<ul> <li>README.rst updated to document --init option.   CONTRIBUTING.rst improved.   Updated french translations. (<code>#58 &lt;https://github.com/dthonon/Client_API_VN/issues/58&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#client-api-vn-v232-2019-07-27","title":"Client-API-VN v2.3.2 (2019-07-27)","text":""},{"location":"changelog-old/#features_17","title":"Features","text":"<ul> <li>Added --init option, that creates a draft YAML configuration file.   This file then needs to be edited before use. (<code>#37 &lt;https://github.com/dthonon/Client_API_VN/issues/37&gt;</code>_)</li> <li>The comment in downloadlog table is improved, displaying more information about observations download progress. (<code>#53 &lt;https://github.com/dthonon/Client_API_VN/issues/53&gt;</code>)</li> <li>Number of concurrent database insert/update and queue size are parameters   in YAML file, <code>[tuning]</code> section:</li> </ul> <p>.. code-block:: yaml</p> <pre><code>  # Postgresql DB tuning parameters\n  db_worker_threads: 4\n  db_worker_queue: 100000\n</code></pre> <p>(<code>#54 &lt;https://github.com/dthonon/Client_API_VN/issues/54&gt;</code>_)</p>"},{"location":"changelog-old/#bugfixes_18","title":"Bugfixes","text":"<ul> <li>Tentative correction of duplicate key exception. As this is not reproductible, bug fix is not certain.   Insert or update of records in Postgresql DB is now atomic (insert + on conflict). (<code>#55 &lt;https://github.com/dthonon/Client_API_VN/issues/55&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#client-api-vn-v231-2019-07-23","title":"Client-API-VN v2.3.1 (2019-07-23)","text":""},{"location":"changelog-old/#features_18","title":"Features","text":"<ul> <li>HMAC encoding key is defined by YAML parameter dbsecret_key (<code>#50 &lt;https://github.com/dthonon/Client_API_VN/issues/50&gt;</code>)</li> <li>A new field is added to srcvn.observers to anonymize observers:   pseudo_observer_uid. It should be used for data exchance to respect   user privacy. It is encoded by HMAC, using db_secret_key token. (<code>#51 &lt;https://github.com/dthonon/Client_API_VN/issues/51&gt;</code>)</li> </ul>"},{"location":"changelog-old/#misc_6","title":"Misc","text":"<ul> <li><code>#52 &lt;https://github.com/dthonon/Client_API_VN/issues/52&gt;</code>_</li> </ul>"},{"location":"changelog-old/#client-api-vn-v230-2019-06-30","title":"Client-API-VN v2.3.0 (2019-06-30)","text":""},{"location":"changelog-old/#features_19","title":"Features","text":"<ul> <li>Local coordinate system can now be modified.   The new YAML configuration parameter <code>db_out_proj</code> selects the   EPGS system for coordinate transformation. It defaults to 2154 (Lambert 93).   Local coordinates are available in columns coord_x_local and coord_y_local.</li> </ul> <p>(<code>#22 &lt;https://github.com/dthonon/Client_API_VN/issues/22&gt;</code>_)</p> <ul> <li>Forms are now available in the forms_json and forms tables.   Forms contain the following columns:</li> </ul> <p>+-------------------+-----------------+   | column | type |   +===================+=================+   | site | VARCHAR(50) |   +-------------------+-----------------+   | id | INTEGER |   +-------------------+-----------------+   | id_form_universal | VARCHAR(500) |   +-------------------+-----------------+   | time_start | VARCHAR(500) |   +-------------------+-----------------+   | time_stop | VARCHAR(500) |   +-------------------+-----------------+   | full_form | VARCHAR(500) |   +-------------------+-----------------+   | version | VARCHAR(500) |   +-------------------+-----------------+   | coord_lat | FLOAT |   +-------------------+-----------------+   | coord_lon | FLOAT |   +-------------------+-----------------+   | coord_x_local | FLOAT |   +-------------------+-----------------+   | coord_y_local | FLOAT |   +-------------------+-----------------+   | comments | VARCHAR(100000) |   +-------------------+-----------------+   | protocol | VARCHAR(100000) |   +-------------------+-----------------+</p> <p>(<code>#28 &lt;https://github.com/dthonon/Client_API_VN/issues/28&gt;</code>_)</p> <ul> <li>Added parameters to YAML configuration file.   See also Issue #43 and #44 for new or changed parameters.</li> </ul> <p>In <code>database:</code> section, the followng parameter defines the   geographic projection (EPGS code) used to create   <code>coord_x_local</code> and <code>coord_y_local</code>.</p> <p>Optional parameters are added in a new <code>tuning:</code> section, for expert use:</p> <p>.. code-block:: yaml</p> <p># Tuning parameters, for expert use.</p> <p>tuning: # Max chunks in a request before aborting.   max_chunks: 10 # Max retries of API calls before aborting.   max_retry: 5 # Maximum number of API requests, for debugging only. # - 0 means unlimited # - &gt;0 limit number of API requests   max_requests: 0 # LRU cache size for common requests (taxo_groups...)   lru_maxsize: 32 # Earliest year in the archive. Queries will not ge before this date.   min_year: 1901 # PID parameters, for throughput management.   pid_kp: 0.0   pid_ki: 0.003   pid_kd: 0.0   pid_setpoint: 10000   pid_limit_min: 10   pid_limit_max: 2000   pid_delta_days: 15</p> <p>Deprecated <code>local:</code> section and parameters must be removed.   An error is raised if not.</p> <p>(<code>#33 &lt;https://github.com/dthonon/Client_API_VN/issues/33&gt;</code>_)</p> <ul> <li>UUID are not (re)created during columns tables creation.   For observations, they are in a separate uui_xref table. They can be   obtained by joining observations and uui_xref on   (site=site and id=id_sighing).</li> </ul> <p>They are dropped for other tables.</p> <p>Table uuid_xref contains:</p> <p>+--------------+----------+   | column | type |   +==============+==========+   | site | String |   +--------------+----------+   | universal_id | String |   +--------------+----------+   | uuid | String |   +--------------+----------+   | alias | JSONB |   +--------------+----------+   | update_ts | DateTime |   +--------------+----------+</p> <p>(<code>#38 &lt;https://github.com/dthonon/Client_API_VN/issues/38&gt;</code>_)</p> <ul> <li> <p>Application is now tested with</p> </li> <li> <p>Python version 3.5, 3.6 and 3.7</p> </li> <li>Debian 9, Ubuntu 18.10</li> <li>Postgresql 10, 11</li> </ul> <p>(<code>#40 &lt;https://github.com/dthonon/Client_API_VN/issues/40&gt;</code>_)</p> <ul> <li>Implemented fields controler.   Fields data is dowloaded and stored in fields table:</li> </ul> <p>+--------------+---------------+   | column | type |   +==============+===============+   | site | VARCHAR(50) |   +--------------+---------------+   | id | INTEGER |   +--------------+---------------+   | default_v | VARCHAR(500) |   +--------------+---------------+   | empty_choice | VARCHAR(500) |   +--------------+---------------+   | mandatory | VARCHAR(500) |   +--------------+---------------+   | name | VARCHAR(1000) |   +--------------+---------------+</p> <p>(<code>#43 &lt;https://github.com/dthonon/Client_API_VN/issues/43&gt;</code>_)</p> <ul> <li> <p>The following columns are added:</p> <ul> <li>observations.behaviours</li> </ul> </li> </ul> <p>The following columns are now boolean:</p> <pre><code>  * species.is_used\n  * observations.hidden\n  * observations.admin_hidden\n  * observations.mortality\n  * observers.anonymous\n  * observers.collectif\n  * observers.default_hidden\n  * places.is_private\n  * places.visible\n  * species.is_used\n\n  (`#46 &lt;https://github.com/dthonon/Client_API_VN/issues/46&gt;`_)\n</code></pre>"},{"location":"changelog-old/#bugfixes_19","title":"Bugfixes","text":"<ul> <li> <p>Database tables can now be created from any user, provided it is defined   in .yaml file::</p> <p># Postgresql user used to import data   db_user: any_user   # Postgresql user password   db_pw: password</p> </li> </ul> <p>(<code>#39 &lt;https://github.com/dthonon/Client_API_VN/issues/39&gt;</code>_)</p> <ul> <li>Some columns were not filled correctly. This is corrected as described below:</li> </ul> <p>+--------------+---------------------------------+   | column | comment |   +==============+=================================+   | timing | Available in observations table |   +--------------+---------------------------------+   | update_date | Available in observations table |   +--------------+---------------------------------+   | project_code | Available in observations table |   +--------------+---------------------------------+   | details | Available in observations table |   +--------------+---------------------------------+</p> <p>The following parameters are not available in observations table and   need to be fetched from observers table.</p> <p>(<code>#41 &lt;https://github.com/dthonon/Client_API_VN/issues/41&gt;</code>_)</p> <ul> <li> <p>Incorrect parameters name in YAML configuration file.   Replace:</p> </li> <li> <p>taxo_group by taxo_groups</p> </li> <li>territorial_unit by territorial_units</li> </ul> <p>(<code>#44 &lt;https://github.com/dthonon/Client_API_VN/issues/44&gt;</code>_)</p> <ul> <li>update_date is extracted correctly and does raise an exception.</li> </ul> <p>(<code>#49 &lt;https://github.com/dthonon/Client_API_VN/issues/49&gt;</code>_)</p>"},{"location":"changelog-old/#client-api-vn-v222-2019-05-13","title":"Client-API-VN v2.2.2 (2019-05-13)","text":""},{"location":"changelog-old/#features_20","title":"Features","text":"<ul> <li>Added VACUUM FULL ANALYZE after columns table (re)creation (option --coltables_create)   to reclaim space left after mass UPDATE. (<code>#31 &lt;https://github.com/dthonon/Client_API_VN/issues/31&gt;</code>)</li> <li>YAML configuration is now checked for validity when loaded. This should improve error finding when typing configuration file. (<code>#35 &lt;https://github.com/dthonon/Client_API_VN/issues/35&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#bugfixes_20","title":"Bugfixes","text":"<ul> <li>Version is now correctly displayed in application installed from PyPI. (<code>#32 &lt;https://github.com/dthonon/Client_API_VN/issues/32&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#improved-documentation_8","title":"Improved Documentation","text":"<ul> <li>Now using towncrier (https://github.com/hawkowl/towncrier) to update CHANGELOG.   Improved and corrected README.rst and CONTRIBUTING.rst (<code>#34 &lt;https://github.com/dthonon/Client_API_VN/issues/34&gt;</code>_)</li> </ul>"},{"location":"changelog-old/#client-api-vn-221-2019-05-09","title":"Client-API-VN 2.2.1 (2019-05-09)","text":""},{"location":"changelog-old/#features_21","title":"Features","text":"<ul> <li>Starting with this version, the application is packaged and distributed   in PyPI.   See https://pypi.org/project/Client-API-VN/ for more information.</li> </ul> <p>transfervn is now available as a shell script. (<code>#29 &lt;https://github.com/dthonon/Client_API_VN/issues/29&gt;</code>)</p>"},{"location":"contributing/","title":"Contributing to <code>Client_API_VN</code>","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/dthonon/Client_API_VN/issues</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement a fix for it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>Client_API_VN could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/dthonon/Client_API_VN/issues.</p> <p>If you are proposing a new feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>Client_API_VN</code> for local development. Please note this documentation assumes you already have <code>poetry</code> and <code>Git</code> installed and ready to go.</p>"},{"location":"contributing/#installing-the-environment","title":"Installing the environment","text":"<p>Note: install Ubuntu development environment first: <pre><code>sudo apt install git build-essential zlib1g-dev libncurses5-dev libgdbm-dev\nsudo apt install libnss3-dev libssl-dev libsqlite3-dev libreadline-dev libffi-dev curl libbz2-dev\nsudo apt install python-is-python3 python3-dev python3-venv\n</code></pre></p> <p>Add newer python versions, using <code>pyenv</code>: <pre><code>curl https://pyenv.run | bash\npyenv install 3.10.8 # for example\npyenv global 3.10.8  # for example\n</code></pre> If you are using <code>pyenv</code>, select a version to use locally. (See installed versions with <code>pyenv versions</code>)</p> <pre><code>pyenv local &lt;x.y.z&gt;\n</code></pre> <p>Add the following lines to .bashrc, to enable pyenv: <pre><code># Load pyenv automatically\nexport PATH=\"~/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n</code></pre></p>"},{"location":"contributing/#downloading-source","title":"Downloading source","text":"<p>Clone github repository: <pre><code>git clone https://github.com/dthonon/Client_API_VN.git\ncd Client_API_VN\n</code></pre></p>"},{"location":"contributing/#installing-the-application","title":"Installing the application","text":"<p>Run: <pre><code>make install\n</code></pre></p>"},{"location":"contributing/#code-changes","title":"Code changes","text":"<p>Install pre-commit to run linters/formatters at commit time: <pre><code>poetry run pre-commit install\n</code></pre></p> <p>Create a branch for local development: <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre></p> <p>Now you can make your changes locally.</p> <p>When you're done making changes, check that your changes pass the formatting tests. <pre><code>make check\n</code></pre></p>"},{"location":"contributing/#running-the-tests","title":"Running the tests","text":"<p>Don't forget to add test cases for your added functionality to the <code>tests</code> directory.</p> <p>Create .evn_test.toml file in your root directory: <pre><code>transfer_vn --init .evn_test.toml\n</code></pre> Replace template text with actual data (site, user, password...). The tests access the active production site of biolovision and requires admin rights.</p> <p>Currently, tests are only defined for the following sites: <pre><code>tff: https://www.faune-aura.org/\n</code></pre> Create the test database:: <pre><code>transfer_vn --db_create .evn_test.yaml\n</code></pre></p> <p>Now, validate that all unit tests are passing: <pre><code>make test\n</code></pre></p> <p>Before raising a pull request you should also run tox. This will run the tests across different versions of Python: <pre><code>tox\n</code></pre></p> <p>This requires you to have multiple versions of python installed. This step is also triggered in the CI/CD pipeline, so you could also choose to skip this step locally.</p>"},{"location":"contributing/#update-translations","title":"Update translations","text":"<p>If you added new text messages, enclosed in _(), you need to update the translations: <pre><code>make update_catalog\neditor src/export_vn/locale/fr_FR/LC_MESSAGES/export_vn.po\nmake compile_catalog\n</code></pre></p>"},{"location":"contributing/#finalize-changes","title":"Finalize changes","text":"<p>Commit your changes and push your branch to GitHub:</p> <pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre> <p>Submit a pull request through the GitHub website.</p>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li> <p>The pull request should include tests.</p> </li> <li> <p>If the pull request adds functionality, the docs should be updated.    Put your new functionality into a function with a docstring, and add the feature to the list in <code>README.md</code>.</p> </li> </ol>"},{"location":"modules/","title":"API","text":"<p>Thin Python binding to Biolovision API, returning dict instead of JSON. Currently, only a subset of API controlers are implemented, and only a subset of functions and parameters for implemented controlers. See details in each class.</p> <p>Each Biolovision controler is mapped to a python class. Class name is derived from controler name by removing <code>_</code> and using CamelCase. Methods names are similar to the corresponding API call, prefixed by <code>api</code>. For example, method <code>api_list</code> in class <code>LocalAdminUnits</code> will call <code>local_admin_units</code>.</p> <p>Most notable difference is that API chunks are grouped under <code>data</code>, i.e. calling <code>species_list('1')</code> will return all birds in one array under <code>data</code> key. This means that requests returning lots of chunks (all bird sightings !) must be avoided, as memory could be insufficient.</p> <p><code>max_chunks __init__</code> parameter controls the maximum number of chunks allowed and raises an exception if it exceeds.</p> <p>Biolovision API to Classes mapping:</p> Controler Class <code>taxo_groups</code> <code>TaxoGroupsAPI</code> <code>families</code> <code>FamiliesAPI</code> <code>species</code> <code>SpeciesAPI</code> <code>territorial_units</code> <code>TerritorialUnitsAPI</code> <code>local_admin_units</code> <code>LocalAdminUnitsAPI</code> <code>places</code> <code>PlacesAPI</code> <code>observers</code> <code>ObserversAPI</code> <code>entities</code> <code>EntitiesAPI</code> <code>protocol</code> NA <code>export_organizations</code> NA <code>observations</code> <code>ObservationsAPI</code> <code>fields</code> <code>FieldsAPI</code> <code>media</code> NA <code>import_files</code> NA <code>import_files_observations</code> NA <code>validations</code> <code>ValidationsAPI</code> <code>mortality</code> NA <code>gypaetus_barbatus_birds</code> NA <code>gypaetus_barbatus_informations</code> NA <code>observations_by_polygon</code> NA <code>polygons</code> NA <code>grids</code> NA <code>grids_communes</code> NA <code>atlas_documents</code> NA <p>Provide python interface to Biolovision API.</p> <p>Methods, see each class.</p> <p>Properties:</p> <ul> <li>transfer_errors            - Return number of HTTP errors</li> </ul> <p>Exceptions:</p> <ul> <li>BiolovisionApiException    - General exception</li> <li>HTTPError                  - HTTP protocol error</li> <li>MaxChunksError             - Too many chunks returned from API calls</li> <li>IncorrectParameter         - Incorrect or missing parameter</li> </ul>"},{"location":"modules/#biolovision.api.BiolovisionAPI","title":"<code>BiolovisionAPI</code>","text":"<p>Top class, not for direct use. Provides internal and template methods.</p> Source code in <code>src/biolovision/api.py</code> <pre><code>class BiolovisionAPI:\n    \"\"\"Top class, not for direct use. Provides internal and template methods.\"\"\"\n\n    def __init__(\n        self,\n        controler: str = \"\",\n        user_email: str | None = None,\n        user_pw: str | None = None,\n        base_url: str | None = None,\n        client_key: str | None = None,\n        client_secret: str | None = None,\n        max_retry: int | None = None,\n        max_requests: int | None = None,\n        max_chunks: int | None = None,\n        unavailable_delay: int | None = None,\n        retry_delay: int | None = None,\n    ) -&gt; None:\n        if controler == \"\":\n            logger.fatal(_(\"controler must be defined\"))\n            raise BiolovisionApiException\n        else:\n            self._ctrl = controler\n        if user_email is None:\n            logger.fatal(_(\"user_email must be defined\"))\n            raise BiolovisionApiException\n        else:\n            self._user_email = user_email\n        if user_pw is None:\n            logger.fatal(_(\"user_pw must be defined\"))\n            raise BiolovisionApiException\n        else:\n            self._user_pw = user_pw\n        if base_url is None:\n            logger.fatal(_(\"base_url must be defined\"))\n            raise BiolovisionApiException\n        if client_key is None:\n            logger.fatal(_(\"client_key must be defined\"))\n            raise BiolovisionApiException\n        if client_secret is None:\n            logger.fatal(_(\"client_secret must be defined\"))\n            raise BiolovisionApiException\n        if max_retry is None:\n            max_retry = 5\n        if max_requests is None:\n            max_requests = 0\n        if max_chunks is None:\n            max_chunks = 50\n        if unavailable_delay is None:\n            unavailable_delay = 600\n        if retry_delay is None:\n            retry_delay = 5\n        self._limits = {\n            \"max_retry\": max_retry,\n            \"max_requests\": max_requests,\n            \"max_chunks\": max_chunks,\n            \"unavailable_delay\": unavailable_delay,\n            \"retry_delay\": retry_delay,\n        }\n        self._transfer_errors = 0\n        self._http_status = 0\n\n        # Using OAuth1 auth helper to get access\n        self._api_url = base_url + \"api/\"  # URL of API\n        self._oauth = OAuth1(client_key, client_secret=client_secret)\n\n        return None\n\n    @property\n    def version(self) -&gt; str:\n        \"\"\"Return version.\"\"\"\n        return __version__\n\n    @property\n    def transfer_errors(self):\n        \"\"\"Return the number of HTTP errors during this session.\"\"\"\n        return self._transfer_errors\n\n    @property\n    def http_status(self):\n        \"\"\"Return the latest HTTP status code.\"\"\"\n        return self._http_status\n\n    @property\n    def controler(self):\n        \"\"\"Return the controler name.\"\"\"\n        return self._ctrl\n\n    # ----------------\n    # Internal methods\n    # ----------------\n    @staticmethod\n    def _clean_params(params: dict):\n        \"\"\"Remove sensitive data from param dict.\"\"\"\n        c_params = params.copy()\n        c_params[\"user_email\"] = \"***\"\n        c_params[\"user_pw\"] = \"***\"\n        return c_params\n\n    def _url_get(self, params, scope, method=\"GET\", body=None, optional_headers=None):\n        \"\"\"Internal function used to request from Biolovision API.\n\n        Prepare the URL header, perform HTTP request and get json content.\n        Test HTTP status and returns None if error, else return decoded json content.\n        Increments _transfer_errors in case of error.\n\n        Parameters\n        ----------\n        params : dict of 'parameter name': 'parameter value'\n            params is used to build URL GET string.\n        scope : str\n            scope is the api to be queried, for example 'taxo_groups/'.\n        method : str\n            HTTP method to use: GET/POST/DELETE/PUT. Default to GET\n        body : str\n            Optional body for POST or PUT\n        optional_headers : dict\n            Optional body for request\n\n        Returns\n        -------\n        json : dict\n            dict decoded from json if status OK, else None.\n\n        Raises\n        ------\n        HTTPError\n            HTTP protocol error, returned as argument.\n        MaxChunksError\n            Loop on chunks exceeded max_chunks limit.\n\n        \"\"\"\n        # Loop on chunks\n        nb_chunks = 0\n        data_rec = None\n        while nb_chunks &lt; self._limits[\"max_chunks\"]:\n            # Remove DEBUG logging level to avoid too many details\n            level = logging.getLogger().level\n            logging.getLogger().setLevel(logging.INFO)\n\n            # Prepare call to API\n            payload = parse.urlencode(params, quote_via=parse.quote)\n            logger.debug(\n                _(\"Params: %s\"),\n                re.sub(\n                    r\"user_pw=.*?(&amp;|$)(.*)\",\n                    r\"user_pw=***\\1\\2\",\n                    re.sub(r\"user_email=.*?(&amp;|$)(.*)\", r\"user_email=***\\1\\2\", payload),\n                ),\n            )\n            headers = {\"Content-Type\": \"application/json;charset=UTF-8\"}\n            if optional_headers is not None:\n                headers.update(optional_headers)\n            protected_url = self._api_url + scope\n            if method == \"GET\":\n                resp = requests.get(url=protected_url, auth=self._oauth, params=payload, headers=headers)\n            elif method == \"POST\":\n                resp = requests.post(\n                    url=protected_url,\n                    auth=self._oauth,\n                    params=payload,\n                    headers=headers,\n                    data=body,\n                )\n            elif method == \"PUT\":\n                resp = requests.put(\n                    url=protected_url,\n                    auth=self._oauth,\n                    params=payload,\n                    headers=headers,\n                    data=body,\n                )\n            elif method == \"DELETE\":\n                resp = requests.delete(url=protected_url, auth=self._oauth, params=payload, headers=headers)\n            else:\n                raise NotImplementedException\n\n            logger.debug(resp.headers)\n            logging.getLogger().setLevel(level)\n            logger.debug(\n                _(\"%s status code = %s, for URL %s\"),\n                method,\n                resp.status_code,\n                protected_url,\n            )\n            self._http_status = resp.status_code\n            if self._http_status &gt;= 300:\n                # Request returned an error.\n                # Logging and checking if not too many errors to continue\n                logger.error(\n                    _(\"%s status code: %s, text: %s, for URL %s\"),\n                    method,\n                    resp.status_code,\n                    resp.text,\n                    protected_url,\n                )\n\n                if (self._http_status &gt;= 400) and (self._http_status &lt;= 499):  # pragma: no cover\n                    # Unreceverable error\n                    logger.error(resp)\n                    logger.critical(\n                        _(\"Unreceverable error %s, raising exception\"),\n                        self._http_status,\n                    )\n                    raise HTTPError(resp.status_code)\n                self._transfer_errors += 1  # pragma: no cover\n                if self._http_status == 503:  # pragma: no cover\n                    # Service unavailable: long wait\n                    time.sleep(self._limits[\"unavailable_delay\"])\n                else:\n                    # A transient error: short wait\n                    time.sleep(self._limits[\"retry_delay\"])\n\n                if self._transfer_errors &gt; self._limits[\"max_retry\"]:  # pragma: no cover\n                    # Too many retries. Raising exception\n                    logger.critical(_(\"Too many error %s, raising exception\"), self._transfer_errors)\n                    raise HTTPError(resp.status_code)\n            else:\n                # No error from request: processing response if needed\n                # Resetting error count after successful transfer\n                self._transfer_errors = 0\n                if method in [\"PUT\", \"DELETE\"]:\n                    # No response expected\n                    resp_chunk = json.loads(\"{}\")\n                else:\n                    try:\n                        logger.debug(_(\"Response content: %s, text: %s\"), resp, resp.text[:1000])\n                        # TWEAK: remove extra text outside JSON response\n                        if len(resp.text) &gt; 1:\n                            rsp = re.findall(r\"([\\[{].*[}\\]])\", resp.text)\n                            if len(rsp) &gt; 0:\n                                resp_chunk = json.loads(rsp[0])\n                            else:\n                                resp_chunk = {}\n                        else:\n                            resp_chunk = resp.json(\"{}\")\n                    except json.decoder.JSONDecodeError:  # pragma: no cover\n                        # Error during JSON decoding =&gt;\n                        # Logging error and no further processing of empty chunk\n                        resp_chunk = json.loads(\"{}\")\n                        logger.error(_(\"Incorrect response content: %s\"), resp)\n                    except Exception:\n                        logger.exception(_(\"Response text causing exception: %s\"), resp.text)\n                        raise\n\n                # Initialize or append to response dict, depending on content\n                if \"data\" in resp_chunk:\n                    observations = False\n                    if \"sightings\" in resp_chunk[\"data\"]:\n                        observations = True\n                        logger.debug(\n                            _(\"Received %d sightings in chunk %d\"),\n                            len(resp_chunk[\"data\"][\"sightings\"]),\n                            nb_chunks,\n                        )\n                        if nb_chunks == 0:\n                            data_rec = resp_chunk\n                        else:\n                            if \"sightings\" in data_rec[\"data\"]:\n                                data_rec[\"data\"][\"sightings\"] += resp_chunk[\"data\"][\"sightings\"]\n                            else:\n                                # logger.error(_(\"No 'sightings' in previous data\"))\n                                # logger.error(data_rec)\n                                # logger.error(resp_chunk)\n                                data_rec[\"data\"][\"sightings\"] = resp_chunk[\"data\"][\"sightings\"]\n                    if \"forms\" in resp_chunk[\"data\"]:\n                        observations = True\n                        logger.debug(\n                            _(\"Received %d forms in chunk %d\"),\n                            len(resp_chunk[\"data\"][\"forms\"]),\n                            nb_chunks,\n                        )\n                        if nb_chunks == 0:\n                            data_rec = resp_chunk\n                        else:\n                            if \"forms\" in data_rec[\"data\"]:\n                                data_rec[\"data\"][\"forms\"] += resp_chunk[\"data\"][\"forms\"]\n                            else:  # pragma: no cover\n                                # logger.error(\n                                #     _(\"Trying to add 'forms' to another data stream\")\n                                # )\n                                # logger.error(data_rec)\n                                # logger.error(resp_chunk)\n                                data_rec[\"data\"][\"forms\"] = resp_chunk[\"data\"][\"forms\"]\n\n                    if not observations:\n                        logger.debug(\n                            _(\"Received %d data items in chunk %d\"),\n                            len(resp_chunk),\n                            nb_chunks,\n                        )\n                        if nb_chunks == 0:\n                            data_rec = resp_chunk\n                        else:\n                            data_rec[\"data\"] += resp_chunk[\"data\"]\n                else:\n                    logger.debug(_(\"Received non-data response: %s\"), resp_chunk)\n                    if nb_chunks == 0:\n                        data_rec = resp_chunk\n                    else:\n                        data_rec += resp_chunk\n\n                # Is there more data to come?\n                if (\n                    (\"transfer-encoding\" in resp.headers)\n                    and (resp.headers[\"transfer-encoding\"] == \"chunked\")\n                    and (\"pagination_key\" in resp.headers)\n                ):\n                    logger.debug(\n                        _(\"Chunked transfer =&gt; requesting for more, with key: %s\"),\n                        resp.headers[\"pagination_key\"],\n                    )\n                    # Update request parameters to get next chunk\n                    params[\"pagination_key\"] = resp.headers[\"pagination_key\"]\n                    nb_chunks += 1\n                else:\n                    logger.debug(_(\"Non-chunked transfer =&gt; finished requests\"))\n                    if \"pagination_key\" in params:\n                        del params[\"pagination_key\"]\n                    break\n\n        logger.debug(_(\"Received %d chunks\"), nb_chunks)\n        if nb_chunks &gt;= self._limits[\"max_chunks\"]:\n            raise MaxChunksError\n\n        return data_rec\n\n    def _api_list(self, opt_params=None, optional_headers=None):\n        \"\"\"Query for a list of entities of the given controler.\n\n        Calls /ctrl API.\n\n        Parameters\n        ----------\n        opt_params : HashableDict (to enable lru_cache)\n            optional URL parameters, empty by default.\n            See Biolovision API documentation.\n        optional_headers : dict\n            Optional body for GET request\n\n        Returns\n        -------\n        json : dict or None\n            dict decoded from json if status OK, else None\n        \"\"\"\n        # Mandatory parameters.\n        params = {\n            \"user_email\": self._user_email,\n            \"user_pw\": self._user_pw,\n        }\n        if opt_params is not None:\n            params.update(opt_params)\n        logger.debug(\n            _(\"List from:%s, with options:%s, optional_headers:%s\"),\n            self._ctrl,\n            self._clean_params(params),\n            optional_headers,\n        )\n        # GET from API\n        entities = self._url_get(params, self._ctrl, optional_headers=optional_headers)[\"data\"]\n        logger.debug(_(\"Number of entities = %i\"), len(entities))\n        return {\"data\": entities}\n\n    # -----------------------------------------\n    #  Generic methods, used by most subclasses\n    # -----------------------------------------\n\n    def api_get(self, id_entity, **kwargs):\n        \"\"\"Query for a single entity of the given controler.\n\n        Calls  /ctrl/id API.\n\n        Parameters\n        ----------\n        id_entity : str\n            entity to retrieve.\n        **kwargs :\n            optional URL parameters, empty by default.\n            See Biolovision API documentation.\n\n        Returns\n        -------\n        json : dict or None\n            dict decoded from json if status OK, else None\n        \"\"\"\n        # Mandatory parameters.\n        params = {\n            \"user_email\": self._user_email,\n            \"user_pw\": self._user_pw,\n        }\n        for key, value in kwargs.items():\n            params[key] = value\n        logger.debug(\n            _(\"In api_get for controler:%s, entity: %s, with parameters:%s\"),\n            self._ctrl,\n            id_entity,\n            self._clean_params(params),\n        )\n        # GET from API\n        return self._url_get(params, self._ctrl + \"/\" + str(id_entity))\n\n    def api_list(self, opt_params=None, optional_headers=None):\n        \"\"\"Query for a list of entities of the given controler.\n\n        Calls /ctrl API.\n\n        Parameters\n        ----------\n        opt_params : dict\n            optional URL parameters, empty by default.\n            See Biolovision API documentation.\n        optional_headers : dict\n            Optional body for GET request\n\n        Returns\n        -------\n        json : dict or None\n            dict decoded from json if status OK, else None\n        \"\"\"\n        h_params = None if opt_params is None else HashableDict(opt_params)\n        h_headers = None if optional_headers is None else HashableDict(optional_headers)\n        return self._api_list(opt_params=h_params, optional_headers=h_headers)\n\n    # -------------------------\n    # Exception testing methods\n    # -------------------------\n    def wrong_api(self):\n        \"\"\"Query for a wrong api.\n\n        Calls /error API to raise an exception.\n\n        \"\"\"\n        # Mandatory parameters.\n        params = {\n            \"user_email\": self._user_email,\n            \"user_pw\": self._user_pw,\n        }\n        # GET from API\n        return self._url_get(params, \"error/\")\n</code></pre>"},{"location":"modules/#biolovision.api.BiolovisionAPI.controler","title":"<code>controler</code>  <code>property</code>","text":"<p>Return the controler name.</p>"},{"location":"modules/#biolovision.api.BiolovisionAPI.http_status","title":"<code>http_status</code>  <code>property</code>","text":"<p>Return the latest HTTP status code.</p>"},{"location":"modules/#biolovision.api.BiolovisionAPI.transfer_errors","title":"<code>transfer_errors</code>  <code>property</code>","text":"<p>Return the number of HTTP errors during this session.</p>"},{"location":"modules/#biolovision.api.BiolovisionAPI.version","title":"<code>version: str</code>  <code>property</code>","text":"<p>Return version.</p>"},{"location":"modules/#biolovision.api.BiolovisionAPI.api_get","title":"<code>api_get(id_entity, **kwargs)</code>","text":"<p>Query for a single entity of the given controler.</p> <p>Calls  /ctrl/id API.</p> <p>Parameters:</p> Name Type Description Default <code>id_entity</code> <code>str</code> <p>entity to retrieve.</p> required <code>**kwargs</code> <p>optional URL parameters, empty by default. See Biolovision API documentation.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>json</code> <code>dict or None</code> <p>dict decoded from json if status OK, else None</p> Source code in <code>src/biolovision/api.py</code> <pre><code>def api_get(self, id_entity, **kwargs):\n    \"\"\"Query for a single entity of the given controler.\n\n    Calls  /ctrl/id API.\n\n    Parameters\n    ----------\n    id_entity : str\n        entity to retrieve.\n    **kwargs :\n        optional URL parameters, empty by default.\n        See Biolovision API documentation.\n\n    Returns\n    -------\n    json : dict or None\n        dict decoded from json if status OK, else None\n    \"\"\"\n    # Mandatory parameters.\n    params = {\n        \"user_email\": self._user_email,\n        \"user_pw\": self._user_pw,\n    }\n    for key, value in kwargs.items():\n        params[key] = value\n    logger.debug(\n        _(\"In api_get for controler:%s, entity: %s, with parameters:%s\"),\n        self._ctrl,\n        id_entity,\n        self._clean_params(params),\n    )\n    # GET from API\n    return self._url_get(params, self._ctrl + \"/\" + str(id_entity))\n</code></pre>"},{"location":"modules/#biolovision.api.BiolovisionAPI.api_list","title":"<code>api_list(opt_params=None, optional_headers=None)</code>","text":"<p>Query for a list of entities of the given controler.</p> <p>Calls /ctrl API.</p> <p>Parameters:</p> Name Type Description Default <code>opt_params</code> <code>dict</code> <p>optional URL parameters, empty by default. See Biolovision API documentation.</p> <code>None</code> <code>optional_headers</code> <code>dict</code> <p>Optional body for GET request</p> <code>None</code> <p>Returns:</p> Name Type Description <code>json</code> <code>dict or None</code> <p>dict decoded from json if status OK, else None</p> Source code in <code>src/biolovision/api.py</code> <pre><code>def api_list(self, opt_params=None, optional_headers=None):\n    \"\"\"Query for a list of entities of the given controler.\n\n    Calls /ctrl API.\n\n    Parameters\n    ----------\n    opt_params : dict\n        optional URL parameters, empty by default.\n        See Biolovision API documentation.\n    optional_headers : dict\n        Optional body for GET request\n\n    Returns\n    -------\n    json : dict or None\n        dict decoded from json if status OK, else None\n    \"\"\"\n    h_params = None if opt_params is None else HashableDict(opt_params)\n    h_headers = None if optional_headers is None else HashableDict(optional_headers)\n    return self._api_list(opt_params=h_params, optional_headers=h_headers)\n</code></pre>"},{"location":"modules/#biolovision.api.BiolovisionAPI.wrong_api","title":"<code>wrong_api()</code>","text":"<p>Query for a wrong api.</p> <p>Calls /error API to raise an exception.</p> Source code in <code>src/biolovision/api.py</code> <pre><code>def wrong_api(self):\n    \"\"\"Query for a wrong api.\n\n    Calls /error API to raise an exception.\n\n    \"\"\"\n    # Mandatory parameters.\n    params = {\n        \"user_email\": self._user_email,\n        \"user_pw\": self._user_pw,\n    }\n    # GET from API\n    return self._url_get(params, \"error/\")\n</code></pre>"},{"location":"modules/#biolovision.api.BiolovisionApiException","title":"<code>BiolovisionApiException</code>","text":"<p>               Bases: <code>Exception</code></p> <p>An exception occurred while handling your request.</p> Source code in <code>src/biolovision/api.py</code> <pre><code>class BiolovisionApiException(Exception):\n    \"\"\"An exception occurred while handling your request.\"\"\"\n</code></pre>"},{"location":"modules/#biolovision.api.EntitiesAPI","title":"<code>EntitiesAPI</code>","text":"<p>               Bases: <code>BiolovisionAPI</code></p> <p>Implement api calls to entities controler.</p> <p>Methods:</p> <ul> <li> <p>api_get                - Return a single entity from the controler</p> </li> <li> <p>api_list               - Return a list of entity from the controler</p> </li> </ul> Source code in <code>src/biolovision/api.py</code> <pre><code>class EntitiesAPI(BiolovisionAPI):\n    \"\"\"Implement api calls to entities controler.\n\n    Methods:\n\n    - api_get                - Return a single entity from the controler\n\n    - api_list               - Return a list of entity from the controler\n\n    \"\"\"\n\n    def __init__(\n        self,\n        user_email: str | None = None,\n        user_pw: str | None = None,\n        base_url: str | None = None,\n        client_key: str | None = None,\n        client_secret: str | None = None,\n        max_retry: int | None = None,\n        max_requests: int | None = None,\n        max_chunks: int | None = None,\n        unavailable_delay: int | None = None,\n        retry_delay: int | None = None,\n    ) -&gt; None:\n        super().__init__(\n            controler=\"entities\",\n            user_email=user_email,\n            user_pw=user_pw,\n            base_url=base_url,\n            client_key=client_key,\n            client_secret=client_secret,\n            max_retry=max_retry,\n            max_requests=max_requests,\n            max_chunks=max_chunks,\n            unavailable_delay=unavailable_delay,\n            retry_delay=retry_delay,\n        )\n        return None\n</code></pre>"},{"location":"modules/#biolovision.api.FamiliesAPI","title":"<code>FamiliesAPI</code>","text":"<p>               Bases: <code>BiolovisionAPI</code></p> <p>Implement api calls to families controler.</p> <p>Methods:</p> <ul> <li> <p>api_get                - Return a single entity from the controler</p> </li> <li> <p>api_list               - Return a list of entity from the controler</p> </li> </ul> Source code in <code>src/biolovision/api.py</code> <pre><code>class FamiliesAPI(BiolovisionAPI):\n    \"\"\"Implement api calls to families controler.\n\n    Methods:\n\n    - api_get                - Return a single entity from the controler\n\n    - api_list               - Return a list of entity from the controler\n\n    \"\"\"\n\n    def __init__(\n        self,\n        config: dict | None = None,\n        user_email: str | None = None,\n        user_pw: str | None = None,\n        base_url: str | None = None,\n        client_key: str | None = None,\n        client_secret: str | None = None,\n        max_retry: int | None = None,\n        max_requests: int | None = None,\n        max_chunks: int | None = None,\n        unavailable_delay: int | None = None,\n        retry_delay: int | None = None,\n    ) -&gt; None:\n        super().__init__(\n            controler=\"families\",\n            user_email=user_email,\n            user_pw=user_pw,\n            base_url=base_url,\n            client_key=client_key,\n            client_secret=client_secret,\n            max_retry=max_retry,\n            max_requests=max_requests,\n            max_chunks=max_chunks,\n            unavailable_delay=unavailable_delay,\n            retry_delay=retry_delay,\n        )\n        return None\n</code></pre>"},{"location":"modules/#biolovision.api.FieldsAPI","title":"<code>FieldsAPI</code>","text":"<p>               Bases: <code>BiolovisionAPI</code></p> <p>Implement api calls to fields controler.</p> <p>Methods:</p> <ul> <li> <p>api_get                - Return a single entity from the controler</p> </li> <li> <p>api_list               - Return a list of entity from the controler</p> </li> </ul> Source code in <code>src/biolovision/api.py</code> <pre><code>class FieldsAPI(BiolovisionAPI):\n    \"\"\"Implement api calls to fields controler.\n\n    Methods:\n\n    - api_get                - Return a single entity from the controler\n\n    - api_list               - Return a list of entity from the controler\n\n    \"\"\"\n\n    def __init__(\n        self,\n        config: dict | None = None,\n        user_email: str | None = None,\n        user_pw: str | None = None,\n        base_url: str | None = None,\n        client_key: str | None = None,\n        client_secret: str | None = None,\n        max_retry: int | None = None,\n        max_requests: int | None = None,\n        max_chunks: int | None = None,\n        unavailable_delay: int | None = None,\n        retry_delay: int | None = None,\n    ) -&gt; None:\n        super().__init__(\n            controler=\"fields\",\n            user_email=user_email,\n            user_pw=user_pw,\n            base_url=base_url,\n            client_key=client_key,\n            client_secret=client_secret,\n            max_retry=max_retry,\n            max_requests=max_requests,\n            max_chunks=max_chunks,\n            unavailable_delay=unavailable_delay,\n            retry_delay=retry_delay,\n        )\n        return None\n</code></pre>"},{"location":"modules/#biolovision.api.HTTPError","title":"<code>HTTPError</code>","text":"<p>               Bases: <code>BiolovisionApiException</code></p> <p>An HTTP error occurred.</p> Source code in <code>src/biolovision/api.py</code> <pre><code>class HTTPError(BiolovisionApiException):\n    \"\"\"An HTTP error occurred.\"\"\"\n</code></pre>"},{"location":"modules/#biolovision.api.HashableDict","title":"<code>HashableDict</code>","text":"<p>               Bases: <code>dict</code></p> <p>Provide hashable dict type, to enable @lru_cache.</p> Source code in <code>src/biolovision/api.py</code> <pre><code>class HashableDict(dict):\n    \"\"\"Provide hashable dict type, to enable @lru_cache.\"\"\"\n\n    def __hash__(self):\n        return hash(frozenset(self))\n</code></pre>"},{"location":"modules/#biolovision.api.IncorrectParameter","title":"<code>IncorrectParameter</code>","text":"<p>               Bases: <code>BiolovisionApiException</code></p> <p>Incorrect or missing parameter.</p> Source code in <code>src/biolovision/api.py</code> <pre><code>class IncorrectParameter(BiolovisionApiException):\n    \"\"\"Incorrect or missing parameter.\"\"\"\n</code></pre>"},{"location":"modules/#biolovision.api.LocalAdminUnitsAPI","title":"<code>LocalAdminUnitsAPI</code>","text":"<p>               Bases: <code>BiolovisionAPI</code></p> <p>Implement api calls to local_admin_units controler.</p> <p>Methods:</p> <ul> <li> <p>api_get                - Return a single entity from the controler</p> </li> <li> <p>api_list               - Return a list of entity from the controler</p> </li> </ul> Source code in <code>src/biolovision/api.py</code> <pre><code>class LocalAdminUnitsAPI(BiolovisionAPI):\n    \"\"\"Implement api calls to local_admin_units controler.\n\n    Methods:\n\n    - api_get                - Return a single entity from the controler\n\n    - api_list               - Return a list of entity from the controler\n\n    \"\"\"\n\n    def __init__(\n        self,\n        config: dict | None = None,\n        user_email: str | None = None,\n        user_pw: str | None = None,\n        base_url: str | None = None,\n        client_key: str | None = None,\n        client_secret: str | None = None,\n        max_retry: int | None = None,\n        max_requests: int | None = None,\n        max_chunks: int | None = None,\n        unavailable_delay: int | None = None,\n        retry_delay: int | None = None,\n    ) -&gt; None:\n        super().__init__(\n            controler=\"local_admin_units\",\n            user_email=user_email,\n            user_pw=user_pw,\n            base_url=base_url,\n            client_key=client_key,\n            client_secret=client_secret,\n            max_retry=max_retry,\n            max_requests=max_requests,\n            max_chunks=max_chunks,\n            unavailable_delay=unavailable_delay,\n            retry_delay=retry_delay,\n        )\n        return None\n</code></pre>"},{"location":"modules/#biolovision.api.MaxChunksError","title":"<code>MaxChunksError</code>","text":"<p>               Bases: <code>BiolovisionApiException</code></p> <p>Too many chunks returned from API calls.</p> Source code in <code>src/biolovision/api.py</code> <pre><code>class MaxChunksError(BiolovisionApiException):\n    \"\"\"Too many chunks returned from API calls.\"\"\"\n</code></pre>"},{"location":"modules/#biolovision.api.NotImplementedException","title":"<code>NotImplementedException</code>","text":"<p>               Bases: <code>BiolovisionApiException</code></p> <p>Feature not implemented.</p> Source code in <code>src/biolovision/api.py</code> <pre><code>class NotImplementedException(BiolovisionApiException):\n    \"\"\"Feature not implemented.\"\"\"\n</code></pre>"},{"location":"modules/#biolovision.api.ObservationsAPI","title":"<code>ObservationsAPI</code>","text":"<p>               Bases: <code>BiolovisionAPI</code></p> <p>Implement api calls to observations controler.</p> <p>Methods:</p> <ul> <li> <p>api_get         - Return a single observations from the controler</p> </li> <li> <p>api_list        - Return a list of observations from the controler</p> </li> <li> <p>api_diff        - Deprecated: Return all changes in observations since a given date</p> </li> <li> <p>api_search      - Search for observations based on parameter value</p> </li> <li> <p>api_create      - Create a single observation</p> </li> <li> <p>api_update      - Update an existing observation</p> </li> <li> <p>api_delete      - Delete an observation</p> </li> <li> <p>api_delete_list - Delete a list/form</p> </li> </ul> Source code in <code>src/biolovision/api.py</code> <pre><code>class ObservationsAPI(BiolovisionAPI):\n    \"\"\"Implement api calls to observations controler.\n\n    Methods:\n\n    - api_get         - Return a single observations from the controler\n\n    - api_list        - Return a list of observations from the controler\n\n    - api_diff        - Deprecated: Return all changes in observations since a given date\n\n    - api_search      - Search for observations based on parameter value\n\n    - api_create      - Create a single observation\n\n    - api_update      - Update an existing observation\n\n    - api_delete      - Delete an observation\n\n    - api_delete_list - Delete a list/form\n\n    \"\"\"\n\n    def __init__(\n        self,\n        config: dict | None = None,\n        user_email: str | None = None,\n        user_pw: str | None = None,\n        base_url: str | None = None,\n        client_key: str | None = None,\n        client_secret: str | None = None,\n        max_retry: int | None = None,\n        max_requests: int | None = None,\n        max_chunks: int | None = None,\n        unavailable_delay: int | None = None,\n        retry_delay: int | None = None,\n    ) -&gt; None:\n        super().__init__(\n            controler=\"observations\",\n            user_email=user_email,\n            user_pw=user_pw,\n            base_url=base_url,\n            client_key=client_key,\n            client_secret=client_secret,\n            max_retry=max_retry,\n            max_requests=max_requests,\n            max_chunks=max_chunks,\n            unavailable_delay=unavailable_delay,\n            retry_delay=retry_delay,\n        )\n        return None\n\n    def api_list(self, id_taxo_group, **kwargs):\n        \"\"\"Query for list of observations by taxo_group from the controler.\n\n        Calls  /observations API.\n\n        Parameters\n        ----------\n        id_taxo_group : integer\n            taxo_group to query for observations\n        **kwargs :\n            optional URL parameters, empty by default.\n            See Biolovision API documentation.\n\n        Returns\n        -------\n        json : dict or None\n            dict decoded from json if status OK, else None\n        \"\"\"\n        opt_params = dict()\n        opt_params[\"id_taxo_group\"] = str(id_taxo_group)\n        for key, value in kwargs.items():\n            opt_params[key] = value\n        logger.debug(_(\"In api_list, with parameters %s\"), opt_params)\n        return super().api_list(opt_params)\n\n    def api_diff(self, id_taxo_group, delta_time, modification_type=\"all\"):\n        \"\"\"Query for a list of updates or deletions since a given date.\n\n        Calls /observations/diff to get list of created/updated or deleted\n        observations since a given date (max 10 weeks backward).\n\n        Parameters\n        ----------\n        id_taxo_group : str\n            taxo group from which to query diff.\n        delta_time : str\n            Start of time interval to query.\n        modification_type : str\n            Type of diff queried : can be only_modified, only_deleted or\n            all (default).\n\n        Returns\n        -------\n        json : dict or None\n            dict decoded from json if status OK, else None\n        \"\"\"\n        # Mandatory parameters.\n        params = {\n            \"user_email\": self._user_email,\n            \"user_pw\": self._user_pw,\n        }\n        # Specific parameters.\n        params[\"id_taxo_group\"] = str(id_taxo_group)\n        params[\"modification_type\"] = modification_type\n        params[\"date\"] = delta_time\n        # GET from API\n        return super()._url_get(params, \"observations/diff/\")\n\n    def api_search(self, q_params, **kwargs):\n        \"\"\"Search for observations, based on parameter conditions.\n\n        Calls /observations/search to get observations\n        same parameters than in online version can be used\n\n        Parameters\n        ----------\n        q_params : dict\n            Query parameters, same as online version.\n        **kwargs :\n            optional URL parameters, empty by default.\n            See Biolovision API documentation.\n\n        Returns\n        -------\n        json : dict or None\n            dict decoded from json if status OK, else None\n        \"\"\"\n        # Mandatory parameters.\n        params = {\n            \"user_email\": self._user_email,\n            \"user_pw\": self._user_pw,\n        }\n        for key, value in kwargs.items():\n            params[key] = value\n        # Specific parameters.\n        if q_params is not None:\n            body = json.dumps(q_params)\n        else:\n            raise IncorrectParameter\n        logger.debug(\n            _(\"Search from %s, with option %s and body %s\"),\n            self._ctrl,\n            self._clean_params(params),\n            body,\n        )\n        # GET from API\n        return super()._url_get(params, \"observations/search/\", \"POST\", body)\n\n    def api_create(self, data: dict) -&gt; None:\n        \"\"\"Create an observation.\n\n        Calls POST on /observations to create a new observation.\n\n        Parameters\n        ----------\n        data: json\n            Body containing observation in JSON format\n        \"\"\"\n        # Mandatory parameters.\n        params = {\n            \"user_email\": self._user_email,\n            \"user_pw\": self._user_pw,\n        }\n        logger.debug(_(\"Create observation, with data %s\"), data)\n        # POST to API\n        resp = super()._url_get(params, \"observations/\", \"POST\", body=json.dumps(data))\n        if self._http_status == 201:\n            # Successful creation\n            return resp\n        else:\n            raise super().HTTPError(self._http_status)\n\n    def api_update(self, id: str, data: dict) -&gt; None:\n        \"\"\"Update an observation.\n\n        Calls PUT on /observations/%id% to update the observation.\n\n        Parameters\n        ----------\n        id: str\n            Id of observation to update\n        data: json\n            Body containing observation in JSON format\n        \"\"\"\n        # Mandatory parameters.\n        params = {\n            \"user_email\": self._user_email,\n            \"user_pw\": self._user_pw,\n        }\n        logger.debug(_(\"Update observation %s, with data %s\"), id, data)\n        # PUT to API\n        return super()._url_get(params, \"observations/\" + id, \"PUT\", body=json.dumps(data))\n\n    def api_delete(self, id: str) -&gt; None:\n        \"\"\"Deleta an observation.\n\n        Calls DELETE on /observations/%id% to delete the observation.\n\n        Parameters\n        ----------\n        id: str\n            Id of observation to delete\n        \"\"\"\n        # Mandatory parameters.\n        params = {\n            \"user_email\": self._user_email,\n            \"user_pw\": self._user_pw,\n        }\n        logger.debug(_(\"Delete observation %s\"), id)\n        # DELETE to API\n        return super()._url_get(params, \"observations/\" + id, \"DELETE\")\n\n    def api_delete_list(self, data: dict | None = None) -&gt; None:\n        \"\"\"Deleta a list/form.\n\n        Calls POST on /observations/delete_list/%id% to delete the observation.\n\n        Parameters\n        ----------\n        data: Dict\n            id_form or id_form_universal to delete\n        \"\"\"\n        # Mandatory parameters.\n        params = {\n            \"user_email\": self._user_email,\n            \"user_pw\": self._user_pw,\n        }\n        logger.debug(_(\"Delete observation %s\"), id)\n        # POST to API\n        if data is not None:\n            res = super()._url_get(params, \"observations/delete_list\", \"POST\", body=json.dumps(data))\n        else:\n            logger.warning(_(\"No parameter passed: call ignored\"))\n            res = None\n        return res\n</code></pre>"},{"location":"modules/#biolovision.api.ObservationsAPI.api_create","title":"<code>api_create(data)</code>","text":"<p>Create an observation.</p> <p>Calls POST on /observations to create a new observation.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Body containing observation in JSON format</p> required Source code in <code>src/biolovision/api.py</code> <pre><code>def api_create(self, data: dict) -&gt; None:\n    \"\"\"Create an observation.\n\n    Calls POST on /observations to create a new observation.\n\n    Parameters\n    ----------\n    data: json\n        Body containing observation in JSON format\n    \"\"\"\n    # Mandatory parameters.\n    params = {\n        \"user_email\": self._user_email,\n        \"user_pw\": self._user_pw,\n    }\n    logger.debug(_(\"Create observation, with data %s\"), data)\n    # POST to API\n    resp = super()._url_get(params, \"observations/\", \"POST\", body=json.dumps(data))\n    if self._http_status == 201:\n        # Successful creation\n        return resp\n    else:\n        raise super().HTTPError(self._http_status)\n</code></pre>"},{"location":"modules/#biolovision.api.ObservationsAPI.api_delete","title":"<code>api_delete(id)</code>","text":"<p>Deleta an observation.</p> <p>Calls DELETE on /observations/%id% to delete the observation.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Id of observation to delete</p> required Source code in <code>src/biolovision/api.py</code> <pre><code>def api_delete(self, id: str) -&gt; None:\n    \"\"\"Deleta an observation.\n\n    Calls DELETE on /observations/%id% to delete the observation.\n\n    Parameters\n    ----------\n    id: str\n        Id of observation to delete\n    \"\"\"\n    # Mandatory parameters.\n    params = {\n        \"user_email\": self._user_email,\n        \"user_pw\": self._user_pw,\n    }\n    logger.debug(_(\"Delete observation %s\"), id)\n    # DELETE to API\n    return super()._url_get(params, \"observations/\" + id, \"DELETE\")\n</code></pre>"},{"location":"modules/#biolovision.api.ObservationsAPI.api_delete_list","title":"<code>api_delete_list(data=None)</code>","text":"<p>Deleta a list/form.</p> <p>Calls POST on /observations/delete_list/%id% to delete the observation.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict | None</code> <p>id_form or id_form_universal to delete</p> <code>None</code> Source code in <code>src/biolovision/api.py</code> <pre><code>def api_delete_list(self, data: dict | None = None) -&gt; None:\n    \"\"\"Deleta a list/form.\n\n    Calls POST on /observations/delete_list/%id% to delete the observation.\n\n    Parameters\n    ----------\n    data: Dict\n        id_form or id_form_universal to delete\n    \"\"\"\n    # Mandatory parameters.\n    params = {\n        \"user_email\": self._user_email,\n        \"user_pw\": self._user_pw,\n    }\n    logger.debug(_(\"Delete observation %s\"), id)\n    # POST to API\n    if data is not None:\n        res = super()._url_get(params, \"observations/delete_list\", \"POST\", body=json.dumps(data))\n    else:\n        logger.warning(_(\"No parameter passed: call ignored\"))\n        res = None\n    return res\n</code></pre>"},{"location":"modules/#biolovision.api.ObservationsAPI.api_diff","title":"<code>api_diff(id_taxo_group, delta_time, modification_type='all')</code>","text":"<p>Query for a list of updates or deletions since a given date.</p> <p>Calls /observations/diff to get list of created/updated or deleted observations since a given date (max 10 weeks backward).</p> <p>Parameters:</p> Name Type Description Default <code>id_taxo_group</code> <code>str</code> <p>taxo group from which to query diff.</p> required <code>delta_time</code> <code>str</code> <p>Start of time interval to query.</p> required <code>modification_type</code> <code>str</code> <p>Type of diff queried : can be only_modified, only_deleted or all (default).</p> <code>'all'</code> <p>Returns:</p> Name Type Description <code>json</code> <code>dict or None</code> <p>dict decoded from json if status OK, else None</p> Source code in <code>src/biolovision/api.py</code> <pre><code>def api_diff(self, id_taxo_group, delta_time, modification_type=\"all\"):\n    \"\"\"Query for a list of updates or deletions since a given date.\n\n    Calls /observations/diff to get list of created/updated or deleted\n    observations since a given date (max 10 weeks backward).\n\n    Parameters\n    ----------\n    id_taxo_group : str\n        taxo group from which to query diff.\n    delta_time : str\n        Start of time interval to query.\n    modification_type : str\n        Type of diff queried : can be only_modified, only_deleted or\n        all (default).\n\n    Returns\n    -------\n    json : dict or None\n        dict decoded from json if status OK, else None\n    \"\"\"\n    # Mandatory parameters.\n    params = {\n        \"user_email\": self._user_email,\n        \"user_pw\": self._user_pw,\n    }\n    # Specific parameters.\n    params[\"id_taxo_group\"] = str(id_taxo_group)\n    params[\"modification_type\"] = modification_type\n    params[\"date\"] = delta_time\n    # GET from API\n    return super()._url_get(params, \"observations/diff/\")\n</code></pre>"},{"location":"modules/#biolovision.api.ObservationsAPI.api_list","title":"<code>api_list(id_taxo_group, **kwargs)</code>","text":"<p>Query for list of observations by taxo_group from the controler.</p> <p>Calls  /observations API.</p> <p>Parameters:</p> Name Type Description Default <code>id_taxo_group</code> <code>integer</code> <p>taxo_group to query for observations</p> required <code>**kwargs</code> <p>optional URL parameters, empty by default. See Biolovision API documentation.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>json</code> <code>dict or None</code> <p>dict decoded from json if status OK, else None</p> Source code in <code>src/biolovision/api.py</code> <pre><code>def api_list(self, id_taxo_group, **kwargs):\n    \"\"\"Query for list of observations by taxo_group from the controler.\n\n    Calls  /observations API.\n\n    Parameters\n    ----------\n    id_taxo_group : integer\n        taxo_group to query for observations\n    **kwargs :\n        optional URL parameters, empty by default.\n        See Biolovision API documentation.\n\n    Returns\n    -------\n    json : dict or None\n        dict decoded from json if status OK, else None\n    \"\"\"\n    opt_params = dict()\n    opt_params[\"id_taxo_group\"] = str(id_taxo_group)\n    for key, value in kwargs.items():\n        opt_params[key] = value\n    logger.debug(_(\"In api_list, with parameters %s\"), opt_params)\n    return super().api_list(opt_params)\n</code></pre>"},{"location":"modules/#biolovision.api.ObservationsAPI.api_search","title":"<code>api_search(q_params, **kwargs)</code>","text":"<p>Search for observations, based on parameter conditions.</p> <p>Calls /observations/search to get observations same parameters than in online version can be used</p> <p>Parameters:</p> Name Type Description Default <code>q_params</code> <code>dict</code> <p>Query parameters, same as online version.</p> required <code>**kwargs</code> <p>optional URL parameters, empty by default. See Biolovision API documentation.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>json</code> <code>dict or None</code> <p>dict decoded from json if status OK, else None</p> Source code in <code>src/biolovision/api.py</code> <pre><code>def api_search(self, q_params, **kwargs):\n    \"\"\"Search for observations, based on parameter conditions.\n\n    Calls /observations/search to get observations\n    same parameters than in online version can be used\n\n    Parameters\n    ----------\n    q_params : dict\n        Query parameters, same as online version.\n    **kwargs :\n        optional URL parameters, empty by default.\n        See Biolovision API documentation.\n\n    Returns\n    -------\n    json : dict or None\n        dict decoded from json if status OK, else None\n    \"\"\"\n    # Mandatory parameters.\n    params = {\n        \"user_email\": self._user_email,\n        \"user_pw\": self._user_pw,\n    }\n    for key, value in kwargs.items():\n        params[key] = value\n    # Specific parameters.\n    if q_params is not None:\n        body = json.dumps(q_params)\n    else:\n        raise IncorrectParameter\n    logger.debug(\n        _(\"Search from %s, with option %s and body %s\"),\n        self._ctrl,\n        self._clean_params(params),\n        body,\n    )\n    # GET from API\n    return super()._url_get(params, \"observations/search/\", \"POST\", body)\n</code></pre>"},{"location":"modules/#biolovision.api.ObservationsAPI.api_update","title":"<code>api_update(id, data)</code>","text":"<p>Update an observation.</p> <p>Calls PUT on /observations/%id% to update the observation.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Id of observation to update</p> required <code>data</code> <code>dict</code> <p>Body containing observation in JSON format</p> required Source code in <code>src/biolovision/api.py</code> <pre><code>def api_update(self, id: str, data: dict) -&gt; None:\n    \"\"\"Update an observation.\n\n    Calls PUT on /observations/%id% to update the observation.\n\n    Parameters\n    ----------\n    id: str\n        Id of observation to update\n    data: json\n        Body containing observation in JSON format\n    \"\"\"\n    # Mandatory parameters.\n    params = {\n        \"user_email\": self._user_email,\n        \"user_pw\": self._user_pw,\n    }\n    logger.debug(_(\"Update observation %s, with data %s\"), id, data)\n    # PUT to API\n    return super()._url_get(params, \"observations/\" + id, \"PUT\", body=json.dumps(data))\n</code></pre>"},{"location":"modules/#biolovision.api.ObserversAPI","title":"<code>ObserversAPI</code>","text":"<p>               Bases: <code>BiolovisionAPI</code></p> <p>Implement api calls to observers controler.</p> <p>Methods:</p> <ul> <li> <p>api_get                - Return a single entity from the controler</p> </li> <li> <p>api_list               - Return a list of entity from the controler</p> </li> </ul> Source code in <code>src/biolovision/api.py</code> <pre><code>class ObserversAPI(BiolovisionAPI):\n    \"\"\"Implement api calls to observers controler.\n\n    Methods:\n\n    - api_get                - Return a single entity from the controler\n\n    - api_list               - Return a list of entity from the controler\n\n    \"\"\"\n\n    def __init__(\n        self,\n        config: dict | None = None,\n        user_email: str | None = None,\n        user_pw: str | None = None,\n        base_url: str | None = None,\n        client_key: str | None = None,\n        client_secret: str | None = None,\n        max_retry: int | None = None,\n        max_requests: int | None = None,\n        max_chunks: int | None = None,\n        unavailable_delay: int | None = None,\n        retry_delay: int | None = None,\n    ) -&gt; None:\n        super().__init__(\n            controler=\"observers\",\n            user_email=user_email,\n            user_pw=user_pw,\n            base_url=base_url,\n            client_key=client_key,\n            client_secret=client_secret,\n            max_retry=max_retry,\n            max_requests=max_requests,\n            max_chunks=max_chunks,\n            unavailable_delay=unavailable_delay,\n            retry_delay=retry_delay,\n        )\n        return None\n</code></pre>"},{"location":"modules/#biolovision.api.PlacesAPI","title":"<code>PlacesAPI</code>","text":"<p>               Bases: <code>BiolovisionAPI</code></p> <p>Implement api calls to places controler.</p> <p>Methods:</p> <ul> <li> <p>api_get                - Return a single place from the controler</p> </li> <li> <p>api_list               - Return a list of places from the controler</p> </li> <li> <p>api_diff               - Search for change in places</p> </li> </ul> Source code in <code>src/biolovision/api.py</code> <pre><code>class PlacesAPI(BiolovisionAPI):\n    \"\"\"Implement api calls to places controler.\n\n    Methods:\n\n    - api_get                - Return a single place from the controler\n\n    - api_list               - Return a list of places from the controler\n\n    - api_diff               - Search for change in places\n\n    \"\"\"\n\n    def __init__(\n        self,\n        config: dict | None = None,\n        user_email: str | None = None,\n        user_pw: str | None = None,\n        base_url: str | None = None,\n        client_key: str | None = None,\n        client_secret: str | None = None,\n        max_retry: int | None = None,\n        max_requests: int | None = None,\n        max_chunks: int | None = None,\n        unavailable_delay: int | None = None,\n        retry_delay: int | None = None,\n    ) -&gt; None:\n        super().__init__(\n            controler=\"places\",\n            user_email=user_email,\n            user_pw=user_pw,\n            base_url=base_url,\n            client_key=client_key,\n            client_secret=client_secret,\n            max_retry=max_retry,\n            max_requests=max_requests,\n            max_chunks=max_chunks,\n            unavailable_delay=unavailable_delay,\n            retry_delay=retry_delay,\n        )\n        return None\n\n    def api_diff(self, delta_time, modification_type=\"all\"):\n        \"\"\"Query for a list of updates or deletions since a given date.\n\n        Calls /places/diff to get list of created/updated or deleted\n        places since a given date (max 10 weeks backward).\n\n        Parameters\n        ----------\n        delta_time : str\n            Start of time interval to query.\n        modification_type : str\n            Type of diff queried : can be only_modified, only_deleted or\n            all (default).\n\n        Returns\n        -------\n        json : dict or None\n            dict decoded from json if status OK, else None\n        \"\"\"\n        # Mandatory parameters.\n        params = {\n            \"user_email\": self._user_email,\n            \"user_pw\": self._user_pw,\n        }\n        # Specific parameters.\n        params[\"modification_type\"] = modification_type\n        params[\"date\"] = delta_time\n        # GET from API\n        return super()._url_get(params, \"places/diff/\")\n</code></pre>"},{"location":"modules/#biolovision.api.PlacesAPI.api_diff","title":"<code>api_diff(delta_time, modification_type='all')</code>","text":"<p>Query for a list of updates or deletions since a given date.</p> <p>Calls /places/diff to get list of created/updated or deleted places since a given date (max 10 weeks backward).</p> <p>Parameters:</p> Name Type Description Default <code>delta_time</code> <code>str</code> <p>Start of time interval to query.</p> required <code>modification_type</code> <code>str</code> <p>Type of diff queried : can be only_modified, only_deleted or all (default).</p> <code>'all'</code> <p>Returns:</p> Name Type Description <code>json</code> <code>dict or None</code> <p>dict decoded from json if status OK, else None</p> Source code in <code>src/biolovision/api.py</code> <pre><code>def api_diff(self, delta_time, modification_type=\"all\"):\n    \"\"\"Query for a list of updates or deletions since a given date.\n\n    Calls /places/diff to get list of created/updated or deleted\n    places since a given date (max 10 weeks backward).\n\n    Parameters\n    ----------\n    delta_time : str\n        Start of time interval to query.\n    modification_type : str\n        Type of diff queried : can be only_modified, only_deleted or\n        all (default).\n\n    Returns\n    -------\n    json : dict or None\n        dict decoded from json if status OK, else None\n    \"\"\"\n    # Mandatory parameters.\n    params = {\n        \"user_email\": self._user_email,\n        \"user_pw\": self._user_pw,\n    }\n    # Specific parameters.\n    params[\"modification_type\"] = modification_type\n    params[\"date\"] = delta_time\n    # GET from API\n    return super()._url_get(params, \"places/diff/\")\n</code></pre>"},{"location":"modules/#biolovision.api.SpeciesAPI","title":"<code>SpeciesAPI</code>","text":"<p>               Bases: <code>BiolovisionAPI</code></p> <p>Implement api calls to species controler.</p> <p>Methods:</p> <ul> <li> <p>api_get                - Return a single specie from the controler</p> </li> <li> <p>api_list               - Return a list of species from the controler</p> </li> </ul> Source code in <code>src/biolovision/api.py</code> <pre><code>class SpeciesAPI(BiolovisionAPI):\n    \"\"\"Implement api calls to species controler.\n\n    Methods:\n\n    - api_get                - Return a single specie from the controler\n\n    - api_list               - Return a list of species from the controler\n\n    \"\"\"\n\n    def __init__(\n        self,\n        config: dict | None = None,\n        user_email: str | None = None,\n        user_pw: str | None = None,\n        base_url: str | None = None,\n        client_key: str | None = None,\n        client_secret: str | None = None,\n        max_retry: int | None = None,\n        max_requests: int | None = None,\n        max_chunks: int | None = None,\n        unavailable_delay: int | None = None,\n        retry_delay: int | None = None,\n    ) -&gt; None:\n        super().__init__(\n            controler=\"species\",\n            user_email=user_email,\n            user_pw=user_pw,\n            base_url=base_url,\n            client_key=client_key,\n            client_secret=client_secret,\n            max_retry=max_retry,\n            max_requests=max_requests,\n            max_chunks=max_chunks,\n            unavailable_delay=unavailable_delay,\n            retry_delay=retry_delay,\n        )\n        return None\n</code></pre>"},{"location":"modules/#biolovision.api.TaxoGroupsAPI","title":"<code>TaxoGroupsAPI</code>","text":"<p>               Bases: <code>BiolovisionAPI</code></p> <p>Implement api calls to taxo_groups controler.</p> <p>Methods:</p> <ul> <li> <p>api_get                - Return a single taxo group from the controler</p> </li> <li> <p>api_list               - Return a list of taxo groups from the controler</p> </li> </ul> Source code in <code>src/biolovision/api.py</code> <pre><code>class TaxoGroupsAPI(BiolovisionAPI):\n    \"\"\"Implement api calls to taxo_groups controler.\n\n    Methods:\n\n    - api_get                - Return a single taxo group from the controler\n\n    - api_list               - Return a list of taxo groups from the controler\n\n    \"\"\"\n\n    def __init__(\n        self,\n        config: dict | None = None,\n        user_email: str | None = None,\n        user_pw: str | None = None,\n        base_url: str | None = None,\n        client_key: str | None = None,\n        client_secret: str | None = None,\n        max_retry: int | None = None,\n        max_requests: int | None = None,\n        max_chunks: int | None = None,\n        unavailable_delay: int | None = None,\n        retry_delay: int | None = None,\n    ) -&gt; None:\n        super().__init__(\n            controler=\"taxo_groups\",\n            user_email=user_email,\n            user_pw=user_pw,\n            base_url=base_url,\n            client_key=client_key,\n            client_secret=client_secret,\n            max_retry=max_retry,\n            max_requests=max_requests,\n            max_chunks=max_chunks,\n            unavailable_delay=unavailable_delay,\n            retry_delay=retry_delay,\n        )\n        return None\n\n    @lru_cache(maxsize=32)\n    def api_list(self, opt_params=None):\n        \"\"\"Return list of taxo groups, from cache or site.\"\"\"\n        return super().api_list()\n</code></pre>"},{"location":"modules/#biolovision.api.TaxoGroupsAPI.api_list","title":"<code>api_list(opt_params=None)</code>  <code>cached</code>","text":"<p>Return list of taxo groups, from cache or site.</p> Source code in <code>src/biolovision/api.py</code> <pre><code>@lru_cache(maxsize=32)\ndef api_list(self, opt_params=None):\n    \"\"\"Return list of taxo groups, from cache or site.\"\"\"\n    return super().api_list()\n</code></pre>"},{"location":"modules/#biolovision.api.TerritorialUnitsAPI","title":"<code>TerritorialUnitsAPI</code>","text":"<p>               Bases: <code>BiolovisionAPI</code></p> <p>Implement api calls to territorial_units controler.</p> <p>Methods:</p> <ul> <li> <p>api_get                - Return a single territorial unit from the controler</p> </li> <li> <p>api_list               - Return a list of territorial units from the controler</p> </li> </ul> Source code in <code>src/biolovision/api.py</code> <pre><code>class TerritorialUnitsAPI(BiolovisionAPI):\n    \"\"\"Implement api calls to territorial_units controler.\n\n    Methods:\n\n    - api_get                - Return a single territorial unit from the controler\n\n    - api_list               - Return a list of territorial units from the controler\n\n    \"\"\"\n\n    def __init__(\n        self,\n        config: dict | None = None,\n        user_email: str | None = None,\n        user_pw: str | None = None,\n        base_url: str | None = None,\n        client_key: str | None = None,\n        client_secret: str | None = None,\n        max_retry: int | None = None,\n        max_requests: int | None = None,\n        max_chunks: int | None = None,\n        unavailable_delay: int | None = None,\n        retry_delay: int | None = None,\n    ) -&gt; None:\n        super().__init__(\n            controler=\"territorial_units\",\n            user_email=user_email,\n            user_pw=user_pw,\n            base_url=base_url,\n            client_key=client_key,\n            client_secret=client_secret,\n            max_retry=max_retry,\n            max_requests=max_requests,\n            max_chunks=max_chunks,\n            unavailable_delay=unavailable_delay,\n            retry_delay=retry_delay,\n        )\n        return None\n\n    @lru_cache(maxsize=32)\n    def api_list(self, opt_params=None):\n        \"\"\"Return list of taxo groups, from cache or site.\"\"\"\n        return super().api_list()\n</code></pre>"},{"location":"modules/#biolovision.api.TerritorialUnitsAPI.api_list","title":"<code>api_list(opt_params=None)</code>  <code>cached</code>","text":"<p>Return list of taxo groups, from cache or site.</p> Source code in <code>src/biolovision/api.py</code> <pre><code>@lru_cache(maxsize=32)\ndef api_list(self, opt_params=None):\n    \"\"\"Return list of taxo groups, from cache or site.\"\"\"\n    return super().api_list()\n</code></pre>"},{"location":"modules/#biolovision.api.ValidationsAPI","title":"<code>ValidationsAPI</code>","text":"<p>               Bases: <code>BiolovisionAPI</code></p> <p>Implement api calls to validations controler.</p> <p>Methods:</p> <ul> <li> <p>api_get                - Return a single validation from the controler</p> </li> <li> <p>api_list               - Return the list of validations from the controler</p> </li> </ul> Source code in <code>src/biolovision/api.py</code> <pre><code>class ValidationsAPI(BiolovisionAPI):\n    \"\"\"Implement api calls to validations controler.\n\n    Methods:\n\n    - api_get                - Return a single validation from the controler\n\n    - api_list               - Return the list of validations from the controler\n\n    \"\"\"\n\n    def __init__(\n        self,\n        config: dict | None = None,\n        user_email: str | None = None,\n        user_pw: str | None = None,\n        base_url: str | None = None,\n        client_key: str | None = None,\n        client_secret: str | None = None,\n        max_retry: int | None = None,\n        max_requests: int | None = None,\n        max_chunks: int | None = None,\n        unavailable_delay: int | None = None,\n        retry_delay: int | None = None,\n    ) -&gt; None:\n        super().__init__(\n            controler=\"validations\",\n            user_email=user_email,\n            user_pw=user_pw,\n            base_url=base_url,\n            client_key=client_key,\n            client_secret=client_secret,\n            max_retry=max_retry,\n            max_requests=max_requests,\n            max_chunks=max_chunks,\n            unavailable_delay=unavailable_delay,\n            retry_delay=retry_delay,\n        )\n        return None\n</code></pre>"},{"location":"apps/examples/","title":"Database usage examples","text":""},{"location":"apps/examples/#nature-isere-export","title":"Nature-isere export","text":"<p>The following SQL code creates view on the database for Nature-isere. It can be used as a base for defining views on the database, for export.</p> <pre><code>--\n-- Initialisation de la base pour export vers nature_isere\n--  - Cr\u00e9ation des roles (mots de passes \u00e0 d\u00e9finir). xfer38 est cr\u00e9\u00e9 lors de l'installation du serveur debian\n--  - Cr\u00e9ation de la base, des extensions et des sch\u00e9mas\n--  - Cr\u00e9ation du FOREIGN DATA WRAPPER et des tables FOREIGN\n--  - Cr\u00e9ation des vues mat\u00e9rialis\u00e9es\n--  - Cr\u00e9ation des vues publiques\n--\n-- A utiliser depuis le compte SUPERUSER:\n--  $ sudo -iu xfer38\n--  $ psql postgres\n--\n-- Role: lpo_isere\n\nCREATE ROLE lpo_isere WITH\n    NOLOGIN\n    NOSUPERUSER\n    INHERIT\n    NOCREATEDB\n    NOCREATEROLE\n    NOREPLICATION;\n    GRANT lpo_isere TO xfer38;\n\n-- Role: nature_isere\n-- DROP ROLE nature_isere;\n\nCREATE ROLE nature_isere WITH\nLOGIN\nNOSUPERUSER\nINHERIT\nNOCREATEDB\nNOCREATEROLE\nNOREPLICATION\nPASSWORD '???';\n\n-- Database: faune_isere\n\nALTER DATABASE faune_isere\n    SET search_path TO \"$user\", public, topology;\n\n\\c faune_isere\n\nALTER DEFAULT PRIVILEGES\nGRANT ALL ON TABLES TO lpo_isere;\n\nALTER DEFAULT PRIVILEGES\nGRANT ALL ON TABLES TO postgres;\n\nALTER DEFAULT PRIVILEGES\nGRANT ALL ON TABLES TO xfer38;\n\n-- DROP EXTENSION IF EXISTS adminpack CASCADE;\n-- CREATE EXTENSION adminpack;\n-- DROP EXTENSION IF EXISTS postgis CASCADE;\n-- CREATE EXTENSION postgis;\n-- DROP EXTENSION IF EXISTS postgis_topology CASCADE;\n-- CREATE EXTENSION postgis_topology;\n\nDROP EXTENSION IF EXISTS postgres_fdw CASCADE;\nDROP SERVER IF EXISTS aura_server CASCADE;\nDROP USER MAPPING IF EXISTS FOR xfer38 SERVER aura_server;\n\nCREATE EXTENSION IF NOT EXISTS postgres_fdw;\n\nCREATE SERVER aura_server\n    FOREIGN DATA WRAPPER postgres_fdw\n    OPTIONS (host 'geonature.fauneauvergnerhonealpes.org', port '5432', dbname 'gnlpoaura');\n-- ALTER SERVER aura_server\n--     OWNER TO postgres;\n\nCREATE USER MAPPING FOR xfer38 SERVER aura_server\n    OPTIONS (\"user\" 'xxx', password '???');\n\n-- SCHEMA and FOREIGN SCHEMA\nCREATE SCHEMA IF NOT EXISTS taxonomie\n    AUTHORIZATION lpo_isere;\nCOMMENT ON SCHEMA taxonomie\n    IS 'Sch\u00e9ma contenant les r\u00e9ferentiels officiels (TAXREF, Mailles, etc.)';\n\nIMPORT FOREIGN SCHEMA taxonomie\n    FROM SERVER aura_server INTO taxonomie;\n\n-- TABLES for public access\nDROP TABLE IF EXISTS public.nature_isere_entity;\nCREATE TABLE public.nature_isere_entity (\n    entity_short_name character varying(1000) COLLATE pg_catalog.\"default\" NOT NULL,\n    CONSTRAINT nature_isere_entity_pkey PRIMARY KEY (entity_short_name)\n);\nALTER TABLE public.nature_isere_entity OWNER to lpo_isere;\n\n-- MATERIALIZED VIEWS and TABLES for referentiel\nDROP TABLE IF EXISTS taxonomie.tabx_code_atlas;\nCREATE TABLE taxonomie.tabx_code_atlas (\n    code50 integer NOT NULL,\n    code19 real,\n    CONSTRAINT tabx_code_atlas_pkey PRIMARY KEY (code50)\n);\nALTER TABLE taxonomie.tabx_code_atlas OWNER TO xfer38;\nINSERT INTO taxonomie.tabx_code_atlas VALUES\n    (0, 0),\n    (1, 1),\n    (2, 2),\n    (3, 3),\n    (4, 4),\n    (5, 5),\n    (6, 6),\n    (7, 7),\n    (8, 8),\n    (9, 9),\n    (10, 10),\n    (11, 11),\n    (12, 12),\n    (13, 13),\n    (14, 14),\n    (15, 15),\n    (16, 16),\n    (17, 17),\n    (18, 18),\n    (19, 19),\n    (30, 3.5),\n    (40, 4.5),\n    (50, 11.5),\n    (99, NULL);\n\n-- VIEWS\n\nDROP VIEW IF EXISTS public.obs_nature_isere;\nCREATE OR REPLACE VIEW public.obs_nature_isere AS\nSELECT observations.id_sighting,\n    species.french_name AS name_species,\n    species.latin_name AS latin_species,\n    cor_c_vn_taxref.taxref_id AS \"CD_REF\",\n    observations.date,\n    observations.date_year,\n        CASE\n            WHEN observations.hidden IS NULL THEN observations.place::text\n            ELSE format('E0%sN%s'::text, (observations.coord_x_local / 10000::double precision)::integer, (observations.coord_y_local / 10000::double precision)::integer)\n        END AS place,\n    local_admin_units.name AS municipality,\n    local_admin_units.insee,\n    format('E0%sN%s'::text, (observations.coord_x_local / 10000::double precision)::integer, (observations.coord_y_local / 10000::double precision)::integer) AS grid_name,\n    observations.estimation_code,\n    observations.count AS total_count,\n    observations.details AS detail,\n    observations.atlas_code,\n    observations.altitude,\n    observations.hidden,\n    observations.insert_date,\n    observations.update_date,\n    tabx_code_atlas.code19\nFROM src_vn.observations\n    LEFT JOIN src_vn.species ON observations.id_species = species.id\n    LEFT JOIN src_vn.places ON places.id = observations.id_place\n    LEFT JOIN src_vn.local_admin_units ON places.id_commune = local_admin_units.id\n    LEFT JOIN taxonomie.tabx_code_atlas ON observations.atlas_code = tabx_code_atlas.code50\n    LEFT JOIN taxonomie.cor_c_vn_taxref ON observations.id_species = cor_c_vn_taxref.vn_id\nWHERE (observations.admin_hidden IS NULL) AND observations.count &gt; 0 AND (local_admin_units.name IS NOT NULL);\nALTER TABLE public.obs_nature_isere OWNER TO lpo_isere;\nGRANT SELECT ON TABLE public.obs_nature_isere TO nature_isere;\nGRANT ALL ON TABLE public.obs_nature_isere TO postgres;\nGRANT ALL ON TABLE public.obs_nature_isere TO lpo_isere;\n\nDROP VIEW IF EXISTS public.lieu_nature_isere;\nCREATE OR REPLACE VIEW public.lieu_nature_isere AS\nSELECT places.id AS id,\n    places.name AS nom,\n    places.coord_lat AS latitude__d_d_,\n    places.coord_lon AS longitude__d_d_,\n    places.coord_x_local AS lambert_93_e__m_,\n    places.coord_y_local AS lambert_93_n__m_,\n    places.altitude,\n    places.visible,\n    local_admin_units.insee,\n    local_admin_units.name AS commune\nFROM src_vn.places, src_vn.local_admin_units\nWHERE local_admin_units.id = places.id_commune;\nALTER TABLE public.lieu_nature_isere OWNER TO lpo_isere;\nGRANT SELECT ON TABLE public.lieu_nature_isere TO nature_isere;\nGRANT ALL ON TABLE public.lieu_nature_isere TO lpo_isere;\n\nDROP VIEW IF EXISTS public.espece_nature_isere;\nCREATE OR REPLACE VIEW public.espece_nature_isere AS\nSELECT species.id AS id_species,\n    species.french_name AS name,\n    species.latin_name AS name_latin,\n    species.category_1 AS category,\n    species.rarity\nFROM src_vn.species\nWHERE species.is_used;\nALTER TABLE public.espece_nature_isere OWNER TO lpo_isere;\nGRANT SELECT ON TABLE public.espece_nature_isere TO nature_isere;\nGRANT ALL ON TABLE public.espece_nature_isere TO postgres;\nGRANT ALL ON TABLE public.espece_nature_isere TO lpo_isere;\n</code></pre>"},{"location":"apps/server_install/","title":"Guide d'installation d'un serveur debian","text":"<p>Proc\u00e9dure d'installation sur Linux Debian 11 ou Ubuntu 21.10.</p> <p>Notes :</p> <ul> <li>les lignes encadr\u00e9es sont des commandes bash \u00e0 ex\u00e9cuter</li> <li>les lignes pr\u00e9c\u00e9d\u00e9es de =&gt; sont des \u00e9ditions \u00e0 faire manuellement</li> <li>selon l'h\u00e9bergeur, certaines \u00e9tapes de pr\u00e9paration ne sont pas n\u00e9cessaires</li> <li>le texte entre * est \u00e0 remplacer par le votre</li> <li>non test\u00e9 avec d'autres distributions</li> </ul>"},{"location":"apps/server_install/#1-preparer-linstallation","title":"1. Pr\u00e9parer l'installation","text":"<p>Les commandes suivantes permettent de configurer la machine virtuelle selon la localisation, ici en France, et de nommer la machine.</p> <pre><code>sudo dpkg-reconfigure tzdata\n</code></pre> <p>=&gt; S\u00e9lectionner <code>Europe / Paris</code></p> <pre><code>sudo dpkg-reconfigure locales\n</code></pre> <p>=&gt; S\u00e9lectionner <code>fr_FR.UTF-8</code> et <code>fr_FR.UTF-8</code> par d\u00e9faut</p> <pre><code>sudo hostnamectl set-hostname *votre_nom_de_serveur* --static\n</code></pre> <p>Les commandes suivantes mettent \u00e0 jour les paquets et ajoutent les paquets utiles.</p> <pre><code>sudo apt -y update\nsudo apt -y dist-upgrade\n</code></pre>"},{"location":"apps/server_install/#2-installer-postgresql","title":"2. Installer postgresql","text":"<p>L'installation depuis le d\u00e9p\u00f4t debian standard est r\u00e9alis\u00e9e de la mani\u00e8re suivante.</p> <p><pre><code>sudo apt -y install postgresql postgresql-contrib\nsudo apt -y install postgis postgresql-13-postgis-3\n</code></pre> Puis \u00e9ditez le fichier de configuration : <pre><code>sudo nano /etc/postgresql/13/main/postgresql.conf\n</code></pre> =&gt; changer :</p> <pre><code>listen_addresses='*'\n</code></pre> <p>Puis \u00e9ditez le fichier d'autorisation : <pre><code>sudo nano /etc/postgresql/13/main/pg_hba.conf\n</code></pre> =&gt; ajouter la ligne suivante pour autoriser l'acc\u00e8s exterieur \u00e0 postgresql. <code>host all all 0.0.0.0/0 md5</code></p> <p><pre><code>sudo systemctl reload postgresql\nsudo -iu postgres\n</code></pre> <pre><code>psql\nCREATE EXTENSION adminpack;\nCREATE EXTENSION postgis;\nCREATE EXTENSION postgis_topology;\nALTER ROLE postgres PASSWORD '*whateveryouwant*';\nCREATE ROLE xfer38 LOGIN PASSWORD '*whateveryouwant*' SUPERUSER CREATEDB CREATEROLE;\n</code></pre></p>"},{"location":"apps/server_install/#3-securisation-du-systeme","title":"3. S\u00e9curisation du syst\u00e8me","text":"<p>L'acc\u00e8s au serveur est s\u00e9curis\u00e9 en retirant les acc\u00e8s aux comptes par d\u00e9faut et installant un firewall:</p> <p><pre><code>sudo adduser adm_xfer\nsudo usermod -a -G sudo adm_xfer\nsudo nano /etc/sudoers\n</code></pre> =&gt; Modifier la ligne <code>%sudo   ALL=(ALL:ALL) NOPASSWD:ALL</code> <pre><code>sudo -iu adm_xfer\nnano .profile\n</code></pre> =&gt; ajouter la ligne <code>PATH=\"$PATH:/usr/local/sbin:/usr/sbin:/sbin:/bin\"</code> en fin de fichier <pre><code>mkdir .ssh\nchmod 700 .ssh\nnano .ssh/authorized_keys\n</code></pre> =&gt; copier la cl\u00e9 publique et sauvegarder <pre><code>chmod 600 .ssh/authorized_keys\nsudo nano /etc/ssh/sshd_config\n</code></pre> =&gt; Modifier <code>PermitRootLogin no</code> <pre><code>sudo nano /etc/passwd\n</code></pre> =&gt; remplacer <code>/bin/bash</code> par <code>/usr/sbin/nologin</code> pour les comptes debian ou ubuntu et postgres <pre><code>sudo apt -y install ufw\nsudo ufw allow ssh\nsudo ufw allow postgresql\n# For development servers with additional services (developpement...), to be customized\nsudo ufw allow smtp\nsudo ufw allow ftp\nsudo ufw allow http\nsudo ufw allow https\n# After adding all ports\nsudo ufw enable\nsudo reboot\n</code></pre></p>"},{"location":"apps/server_install/#4-creer-le-compte","title":"4. Cr\u00e9er le compte","text":"<p>La cr\u00e9ation du compte de t\u00e9l\u00e9chargement est assur\u00e9e par:</p> <pre><code>sudo adduser xfer38\n</code></pre>"},{"location":"apps/server_install/#5-installer-lapplication","title":"5. Installer l'application","text":"<p>Voir README.</p>"},{"location":"apps/server_install/#10-optionnel","title":"10. Optionnel","text":"<p>Installation serveur FTP.</p> <p><pre><code>sudo apt -y install proftpd\nsudo nano /etc/proftpd/proftpd.conf\n</code></pre> =&gt; Mettre <code>UseIPv6 off</code> =&gt; Modifier <code>ServerName</code> =&gt; Decommenter <code>DefaultRoot ~</code> et ajouter <code>RootLogin off</code> =&gt; Modifier <code>PassivePorts 50000 50100</code> et <code>MasqueradeAddress 1.2.3.4</code> avec votre adresse IP <pre><code>sudo ufw allow 50000:50100/tcp\n</code></pre></p>"},{"location":"apps/server_install/#11-optionnel","title":"11. Optionnel","text":"<p>Ajouter un disque suppl\u00e9mentaire.</p> <p><pre><code>sudo apt -y install lvm2\nsudo cfdisk /dev/sdb\nsudo pvcreate /dev/sdb1\nsudo vgcreate storage /dev/sdb1\nsudo lvcreate -l 100%FREE -n sharing storage\nsudo mkfs.ext4 /dev/storage/sharing\nsudo nano /etc/fstab\n</code></pre>     =&gt; Ajouter la ligne <code>/dev/storage/sharing  /home/sharing  ext4  defaults  0 2</code> <pre><code>sudo mkdir /home/sharing/\nsudo chown xfer38 /home/sharing/\nsudo chgrp xfer38 /home/sharing/\nsudo mount /home/sharing/\n</code></pre></p>"},{"location":"apps/server_install/#12-optionnel","title":"12. Optionnel","text":"<p>Mise en place des outils de mail, surveillance...</p> <p><pre><code>sudo apt -y install mailutils postfix\n</code></pre> =&gt; S\u00e9lectionner <code>Distribution directe par SMTP (site Internet)</code> =&gt; Valeurs par d\u00e9faut par la suite <pre><code>sudo apt -y install opendkim opendkim-tools\nsudo nano /etc/opendkim.conf\n</code></pre> =&gt; voir https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-dkim-with-postfix-on-debian-wheezy <pre><code>sudo apt -y install logwatch\nsudo mkdir /var/cache/logwatch\nsudo cp /usr/share/logwatch/default.conf/logwatch.conf /etc/logwatch/conf/\nsudo nano /etc/logwatch/conf/logwatch.conf\n</code></pre> =&gt; <code>MailTo = adresse@domaine.tld</code> <pre><code>sudo apt install fail2ban\n</code></pre> =&gt; Voir https://www.digitalocean.com/community/tutorials/how-to-protect-ssh-with-fail2ban-on-debian-7</p>"},{"location":"apps/transfer_vn/","title":"transfer_vn Documentation","text":""},{"location":"apps/transfer_vn/#user-guide","title":"User Guide","text":""},{"location":"apps/transfer_vn/#initial-setup","title":"Initial setup","text":"<p>Initialize the sample YAML file in your HOME directory and edit with your local details. The YAML file is self documented:</p> <pre><code>transfer_vn --init .evn_your_site.yaml\neditor $HOME/.evn_your_site.yaml\n</code></pre> <p>Create the database and tables: <pre><code>transfer_vn --db_create --json_tables_create --col_tables_create .evn_your_site.yaml\n</code></pre></p>"},{"location":"apps/transfer_vn/#running-the-application","title":"Running the application","text":"<p>After editing YAML configuration file, you should proceed in 3 stages:</p> <ol> <li>Transfer of all historical data <code>transfer_vn --full</code>.    Note: the probability of a blocking error during this large transfer is not negligible.    In this case, it is possible to resume the complete download by limiting the taxonomic groups    and/or the start and end dates.</li> <li>Schedule update tasks, based on recurrences defined in the YAML configuration file:    <code>transfer_vn --schedule</code></li> <li>Regular incremental update, for example in an hourly crontab:    <code>transfer_vn --update</code></li> </ol> <p>Transfers overwrite data already downloaded. It is therefore not a problem to restart <code>transfer_vn --full</code> on part of the database.</p> <p>Beware that, depending on the volume of observations, this can take several hours. We recommend starting with a small taxonomic group first: <pre><code>transfer_vn --full .evn_your_site.yaml\n</code></pre></p> <p>After this full download, data can be updated. For observations, only new, modified or deleted observations are downloaded. For other controlers, a full download is always performed. Each controler runs on its own schedule, defined in the YAML configuration file. This step needs to be performed after each <code>--full</code> execution or YAML file modification. To create or update, after modifying the configuration file, the schedule: <pre><code>transfer_vn --schedule .evn_your_site.yaml\n</code></pre> Once this is done, you can update the database with new observations: <pre><code>transfer_vn --update .evn_your_site.yaml\n</code></pre> This can be done by cron, every hour for example. At each run, all scheduled tasks are performed. Note: you must wait until the first scheduled task has expired for a transfer to be carried out. With the default schedule, you must therefore wait for the next round hour <code>--schedule</code>. It must run at least once a week. The virtual environment must be activated in the cron job, for example: <pre><code>0 * * * * echo 'source client_api_vn/env_VN/bin/activate;cd client_api_vn/;transfer_vn --update .evn_your_site.yaml --verbose'| /bin/bash &gt; /dev/null\n</code></pre></p>"},{"location":"apps/transfer_vn/#reference","title":"Reference","text":"<p>The application runs as: <pre><code>transfer_vn options config\n</code></pre> where:</p> <pre><code>options  command line options described below\nconfig   YAML file, located in $HOME directory, described in sample file\n\n-h, --help Prints help and exits\n--version Print version number\n--verbose Increase output verbosity\n--quiet Reduce output verbosity\n--init Initialize the YAML configuration file\n--db_drop Delete if exists database and roles\n--db_create Create database and roles\n--json_tables_create Create or recreate JSON tables in import schema\n--col_tables_create Create or recreate colums based tables\n--migrate Migrates the JSON import schema to latest version\n--full Perform a full download\n--update Perform an incremental download\n--schedule Create or update the incremental update schedule\n--status Print downloading status (schedule, errors...)\n--count Count observations by site and taxo_group\n--profile Gather and print profiling times\n</code></pre>"},{"location":"apps/update_vn/","title":"update_vn Documentation","text":""},{"location":"apps/update_vn/#user-guide","title":"User Guide","text":"<p>Warning</p> <p>This application changes or deletes items directly in the Biolovision database. Use with extreme care !</p> <p>The application <code>update_vn</code> reads an input CSV file containing operations to be applied to the Biolovision database. Each line of this file describes an operation.</p>"},{"location":"apps/update_vn/#initial-setup","title":"Initial setup","text":"<p>Initialize the sample TOML file in your HOME directory and edit with your local details. The TOML file is self documented:</p> <pre><code>update_vn init .evn_your_site.toml\neditor $HOME/.evn_your_site.toml\n</code></pre>"},{"location":"apps/update_vn/#csv-file-content","title":"CSV file content","text":"<p>The CSV file must start with the mandatory first line with column headers:</p> <pre><code>site;id_universal;path;operation;value\n</code></pre> <p>The next lines must contain the following columns:</p> <ul> <li>site, as defined in TOML site section</li> <li>id_universal of the sighting to be modified</li> <li>path to the attribute to modify, in <code>JSONPath syntax &lt;https://goessner.net/articles/JsonPath/&gt;</code>_,   unused if operation is delete_observation</li> <li> <p>operation:</p> </li> <li> <p>replace: create, if this attibute is not present, or update a sighting     attribute</p> </li> <li>delete_attribute: remove the attribute with the given path and keep the     other attributes of the observation</li> <li> <p>delete_observation, to remove completely the observation</p> </li> <li> <p>value: if operation is replace, new value inserted or updated</p> </li> </ul> <p>Note: each operation is logged in hidden_comment, as a JSON message. It is not possible to replace hidden_comment, as logging is appended.</p> <p>For example: <pre><code>site;id_universal;path;operation;value\nIs\u00e8re;2246086;$['data']['sightings'][0]['observers'][0]['atlas_code'];replace;4\nIs\u00e8re;2246086;$['data']['sightings'][0]['observers'][0]['atlas_code'];delete_attribute;\nIs\u00e8re;2246086;;delete_observation;\n</code></pre></p>"},{"location":"apps/update_vn/#run-application","title":"Run application","text":"<p>The application runs as:</p> <pre><code>update_vn update .evn_your_site.toml modifications.csv\n</code></pre>"},{"location":"apps/update_vn/#reference","title":"Reference","text":"<pre><code>Usage: update_vn [OPTIONS] COMMAND [ARGS]...\n\n  Update biolovision database.\n\n  CONFIG: configuration filename\n\n  INPUT: CSV file listing modifications to be applied\n\nOptions:\n  --verbose / --quiet  Increase or decrease output verbosity\n  --version            Show the version and exit.\n  --help               Show this message and exit.\n\nCommands:\n  init    Copy template TOML file to home directory.\n  update  Update Biolovision database.\n</code></pre>"},{"location":"apps/update_vn/#operations-templates","title":"Operations Templates","text":"<p>The following examples can be used as templates:</p>"},{"location":"apps/update_vn/#modification-du-code-projet","title":"Modification du code projet","text":"<p>La liste des projets est accessible sur le site faune-xxx, dans \"Administration\" &gt; \"Gestion de projet\" Attention, le num\u00e9ro de projet est sp\u00e9cifique \u00e0 chaque site: <pre><code>site;id_universal;path;operation;value\nIs\u00e8re;2775784;$['data']['sightings'][0]['observers'][0]['project'];replace;6\n</code></pre></p>"},{"location":"apps/update_vn/#modification-de-lutilisateur","title":"Modification de l'utilisateur","text":"<p>Il faut modifier \u00e0 la fois :</p> <ul> <li>traid : transmitter id</li> <li>@id : observer id</li> </ul> <p>Il est possible de ne pas modifier le param\u00e8tre traid dans le cas de donn\u00e9es int\u00e9gr\u00e9es via un compte d'archives par exemple pour conserver le fait que la donn\u00e9e a \u00e9t\u00e9 import\u00e9e: <pre><code>site;id_universal;path;operation;value\nIs\u00e8re;2775784;$['data']['sightings'][0]['observers'][0]['@id'];replace;38\nIs\u00e8re;2775784;$['data']['sightings'][0]['observers'][0]['traid'];replace;38\n</code></pre></p>"},{"location":"apps/update_vn/#ajout-dun-commentaire","title":"Ajout d'un commentaire","text":"<p>Attention, texte entre guillemets simples: <pre><code>site;id_universal;path;operation;value\nIs\u00e8re;2775784;$['data']['sightings'][0]['observers'][0]['comment'];replace;'test'\n</code></pre></p>"},{"location":"apps/update_vn/#changement-de-comptage","title":"Changement de comptage","text":"<p>Remplacement de \"non compt\u00e9\" par un compte exact: <pre><code>site;id_universal;path;operation;value\nIs\u00e8re;2775784;$['data']['sightings'][0]['observers'][0]['estimation_code'];replace;'EXACT_VALUE'\nIs\u00e8re;2775784;$['data']['sightings'][0]['observers'][0]['count'];replace;1\n</code></pre></p>"},{"location":"apps/update_vn/#changement-de-la-date","title":"Changement de la date","text":"<p>La date est d\u00e9fine par timestamp calcul\u00e9 par la fonction Excel <code>=(C2-DATE(1970;1;1))*86400</code>: <pre><code>site;id_universal;path;operation;value\nIs\u00e8re;2775784;$['data']['sightings'][0]['date']['@timestamp'];replace;1465948800\n</code></pre></p>"},{"location":"apps/update_vn/#mortalite","title":"Mortalit\u00e9","text":"<p>Ajout de la mortalit\u00e9 avec une cause: <pre><code>site;id_universal;path;operation;value\nIs\u00e8re;2775784;$['data']['sightings'][0]['observers'][0]['has_death'];replace;2\nIs\u00e8re;2775784;$['data']['sightings'][0]['observers'][0]['extended_info']['mortality']['death_cause2'];replace;'ROAD_VEHICLE'\n</code></pre></p>"},{"location":"apps/update_vn/#espece","title":"Esp\u00e8ce","text":"<p>Modification en utilisant le num\u00e9ro de l'esp\u00e8ce sur la plateforme concern\u00e9e: <pre><code>site;id_universal;path;operation;value\nvn26;1399774;$['data']['sightings'][0]['species']['@id'];replace;'370'\n</code></pre></p>"},{"location":"apps/validate_vn/","title":"validate_vn Documentation","text":""},{"location":"apps/validate_vn/#user-guide","title":"User Guide","text":"<p>This application validates downloaded JSON files against JSON schemas. JSON files must fist be downloaded by <code>transfer_vn</code>. If the JSON schema does not match with a downloaded file, an error message is printed, describing the difference. The JSON schema should be modified to comply with the newly downloaded files.</p>"},{"location":"apps/validate_vn/#running-the-application","title":"Running the application","text":"<p>The application runs as:</p> <p><pre><code>validate_vn options config\n</code></pre> where:</p> <pre><code>options  command line options described below\nconfig   YAML file, located in $HOME directory, described in sample file\n\n-h, --help Prints help and exits\n--version Print version number\n--verbose Increase output verbosity\n--quiet Reduce output verbosity\n--init Initialize the YAML configuration file\n--validate Validation des sch\u00e9mas avec les fichier JSON t\u00e9l\u00e9charg\u00e9s\n--report Rapport des propri\u00e9tes des sch\u00e9mas\n--restore Rename a rendu leur nom d'origine aux fichiers\n--samples SAMPLES If float in range [0.0, 1.0], the parameter represents a proportion of files, else integer absolute counts.\n</code></pre>"}]}